{
  "language": "Solidity",
  "sources": {
    "contracts/base/Executor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0;\n\nimport \"../utils/Types.sol\";\n\nabstract contract Executor {\n  function execute(\n    Types.Operation operation,\n    address target,\n    uint256 value,\n    bytes memory data,\n    uint256 txGas\n  ) internal returns (bool success) {\n    if(operation == Types.Operation.Call) {\n      // solhint-disable-next-line no-inline-assembly\n      assembly {\n        success := call(txGas, target, value, add(data, 0x20), mload(data), 0, 0)\n      }\n    } else {\n      // solhint-disable-next-line no-inline-assembly\n      assembly {\n        success :=delegatecall(txGas, target, add(data, 0x20), mload(data), 0, 0)\n      }\n    }\n  }\n}"
    },
    "contracts/utils/Types.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0;\n\ncontract Types {\n  enum Operation {Call, DelegateCall}\n}"
    },
    "contracts/utils/SimulateTx.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0;\nimport \"./Types.sol\";\nimport \"../base/Executor.sol\";\n\ncontract SimulateTx is Executor {\n  function simulate(\n    Types.Operation operation,\n    address to, \n    uint256 value,\n    bytes memory data\n  ) external returns(\n    bool success,\n    uint256 gasEstimated,\n    bytes memory returnData\n  ) {\n    uint256 startGas = gasleft();\n    success = execute(operation, to, value, data, gasleft());\n    gasEstimated = startGas - gasleft();\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      let ptr := mload(0x40)\n      mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\n      mstore(ptr, returndatasize())\n      returndatacopy(add(ptr, 0x20), 0, returndatasize())\n      returnData := ptr\n    }\n  }\n}"
    },
    "contracts/MultiSigWallet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/SafeCast.sol\";\nimport \"./utils/Types.sol\";\nimport \"./base/OwnerManager.sol\";\nimport \"./base/Executor.sol\";\nimport \"./handler/TokensHandler.sol\";\n\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\ncontract MultiSigWallet is OwnerManager, Executor, TokensHandler {\n  using SafeMath for uint256;\n  using SafeCast for uint8;\n  using SafeERC20 for IERC20;\n\n  event Received(address indexed sender, uint256 value);\n  event TransactionApproved(address indexed sender, uint256 indexed transactionId);\n  event ApprovalRevoked(address indexed sender, uint256 indexed transactionId);\n  event TransactionSubmitted(uint256 indexed transactionId);\n  event TransactionExecuted(uint256 indexed transactionId);\n  event ExecutionFailed(uint256 indexed transactionId);\n\n  struct Transaction {\n    Types.Operation operation;\n    address target;\n    uint256 value;\n    bytes data;\n    uint8 approval;\n    bool executed;\n  }\n\n  uint8 constant public MAX_OWNER = 50;\n\n  mapping (uint256 => Transaction) public transactions;\n  mapping (uint256 => mapping (address => bool)) public approvals;\n  uint256 public transactionCount;\n\n  /// @dev Contract constructor sets initial owners and required number of confirmations.\n  /// @param _owners List of initial owners.\n  /// @param _required Number of required confirmations.\n  constructor(address[] memory _owners, uint8 _required) {\n    setupOwners(_owners, _required);\n  }\n\n  /// @dev deposit native token into this contract.\n  receive() external payable {\n    emit Received(msg.sender, msg.value);\n  }\n\n  /// @dev Allows an owner to submit and approve a transaction.\n  /// @param operation external call operation\n  /// @param target transaction destination address\n  /// @param value transaction value in Wei.\n  /// @param data transaction data payload.\n  /// @return txnId returns transaction ID.\n  function submitTransaction(\n    Types.Operation operation, \n    address target, \n    uint256 value, \n    bytes memory data\n  ) public returns (uint256 txnId) \n  {\n    txnId = _addTransaction(operation, target, value, data);\n    approve(txnId);\n  }\n\n  /// @dev Allows an owner to approve a transaction.\n  /// @param _txnId transaction ID.\n  function approve(uint256 _txnId) public\n    isOwner(msg.sender)\n    hasTransaction(_txnId)\n    notApproved(_txnId, msg.sender)\n  {\n    transactions[_txnId].approval++;\n    approvals[_txnId][msg.sender] = true;\n\n    emit TransactionApproved(msg.sender, _txnId);\n    executeTransaction(_txnId);\n  }\n\n  /// @dev Allows an owner to revoke a approval for a transaction.\n  /// @param _txnId transaction ID.\n  function revokeApproval(uint256 _txnId) external\n    isOwner(msg.sender)\n    approved(_txnId, msg.sender)\n    notExecuted(_txnId)\n  {\n    transactions[_txnId].approval--;\n    approvals[_txnId][msg.sender] = false;\n    \n    emit ApprovalRevoked(msg.sender, _txnId);\n  }\n\n  /// @dev Allows anyone to execute a approved transaction.\n  /// @param _txnId transaction ID.\n  /// @return success wether it's success\n  function executeTransaction(uint256 _txnId) public\n    isOwner(msg.sender)\n    approved(_txnId, msg.sender)\n    notExecuted(_txnId)\n    returns (bool success)\n  {\n    if (isConfirmed(_txnId)) {\n      Transaction storage txn = transactions[_txnId];\n      success = execute(txn.operation, txn.target, txn.value, txn.data, (gasleft() - 2500));\n      if (success) {\n        txn.executed = true;\n        emit TransactionExecuted(_txnId);\n      } else {\n        txn.executed = false;\n        emit ExecutionFailed(_txnId);\n      }\n    }\n  }\n\n  /// @dev Returns the confirmation status of a transaction.\n  /// @param _txnId transaction ID.\n  /// @return status confirmation status.\n  function isConfirmed(uint _txnId) public view returns (bool status) {\n    status = transactions[_txnId].approval >= getThreshold();\n  }\n\n  /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n  /// @param operation external call operation\n  /// @param target transaction destination address\n  /// @param value transaction value in Wei.\n  /// @param data transaction data payload.\n  /// @return txnId returns transaction ID.\n  function _addTransaction(\n    Types.Operation operation, \n    address target, \n    uint256 value, \n    bytes memory data\n  ) internal\n    isValid(target)\n    returns (uint txnId)\n  {\n    txnId = transactionCount++;\n    transactions[txnId] = Transaction({\n      operation: operation,\n      target: target,\n      value: value,\n      data: data,\n      approval: 0,\n      executed: false\n    });\n    \n    emit TransactionSubmitted(txnId);\n  }\n\n  /// @dev Returns number of approvals of a transaction.\n  /// @param _txnId transaction ID.\n  /// @return count Number of approvals.\n  function getApprovalCount(uint _txnId) external view returns (uint8 count) {\n    count = transactions[_txnId].approval;\n  }\n\n  /// @dev Returns total number of transactions which filers are applied.\n  /// @param _pending Include pending transactions.\n  /// @param _executed Include executed transactions.\n  /// @return count Total number of transactions after filters are applied.\n  function getTransactionCount(bool _pending, bool _executed) external view returns (uint256 count)\n  {\n    for (uint256 i=0; i<transactionCount; i++)\n      if (_pending && !transactions[i].executed || _executed && transactions[i].executed)\n        count++;\n  }\n\n  modifier hasTransaction(uint256 _txnId) {\n    require(_txnId < transactionCount, \"transaction is not exist\");\n    _;\n  }\n\n  modifier approved(uint256 _txnId, address _owner) {\n    require(approvals[_txnId][_owner], \"not been approved by this owner\");\n    _;\n  }\n\n  modifier notApproved(uint256 _txnId, address _owner) {\n    require(!approvals[_txnId][_owner], \"has been approved by this owner\");\n    _;\n  }\n\n  modifier notExecuted(uint256 _txnId) {\n    require(!transactions[_txnId].executed, \"transaction is executed\");\n    _;\n  }\n\n  modifier isValid(address _address) {\n    require(_address != address(0), \"this address is zero address\");\n    _;\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "contracts/base/OwnerManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0;\nimport \"../utils/SelfAuthorized.sol\";\n\nabstract contract OwnerManager is SelfAuthorized {\n  event AddedOwner(address owner);\n  event RemovedOwner(address owner);\n  event ChangedThreshold(uint8 threshold);\n\n  address internal constant SENTINEL_OWNERS = address(0x1);\n  mapping(address => address) internal owners;\n  uint256 internal ownerCount;\n  uint8 internal threshold;\n\n  function setupOwners(address[] memory _owners, uint8 _threshold) internal {\n    require(threshold == 0, \"can only be called once\");\n    require(_threshold <= _owners.length, \"threshold is more than owners\");\n    require(_threshold >= 1, \"at least one owner\");\n    address currentOwner = SENTINEL_OWNERS;\n    for(uint i=0; i<_owners.length; i++) {\n      address owner = _owners[i];\n      require(owner != address(0) && owner != address(this) && owner != currentOwner && owner != SENTINEL_OWNERS, \"not allowed owner address\");\n      require(owners[owner] == address(0), \"duplicate owner address\");\n      owners[currentOwner] = owner;\n      currentOwner = owner;\n    }\n    owners[currentOwner] = SENTINEL_OWNERS;\n    ownerCount = _owners.length;\n    threshold = _threshold;\n  } \n\n  function addOwnerWithThreshold(address owner, uint8 _threshold) public authorized {\n    require(owner != address(0) && owner != address(this) && owner != SENTINEL_OWNERS, \"not allowed owner address\");\n    require(owners[owner] == address(0), \"duplicate owner address\");\n    owners[owner] = owners[SENTINEL_OWNERS];\n    owners[SENTINEL_OWNERS] = owner;\n    ownerCount++;\n    emit AddedOwner(owner);\n\n    if(threshold != _threshold) changeThreshold(_threshold);\n  }\n\n  function removeOwnerWithThreshold(address prevOwner, address owner, uint8 _threshold) internal authorized {\n    require(ownerCount - 1 >= _threshold, \"threshold can not be reached\");\n    require(owner != address(0) && owner != SENTINEL_OWNERS, \"invalid owner address\");\n    require(owners[prevOwner] == owner, \"not correspond to the owner\");\n    owners[prevOwner] = owners[owner];\n    owners[owner] = address(0);\n    ownerCount--;\n    emit RemovedOwner(owner);\n\n    if(threshold != _threshold) changeThreshold(_threshold);\n  }\n\n  function swapOwner(address prevOwner, address oldOwner, address newOwner) public authorized {\n    require(newOwner != address(0) && newOwner != address(this) && newOwner != SENTINEL_OWNERS, \"invalid new owner address\");\n    require(owners[newOwner] == address(0), \"duplicate owner address\");\n    require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, \"invalid old owner address\");\n    require(owners[prevOwner] == oldOwner, \"not correspond to the oldOwner\");\n    owners[newOwner] = owners[oldOwner];\n    owners[prevOwner] = newOwner;\n    owners[oldOwner] = address(0);\n    emit RemovedOwner(oldOwner);\n    emit AddedOwner(newOwner);\n  }\n\n  function changeThreshold(uint8 _threshold) public authorized {\n    require(_threshold <= ownerCount, \"threshold is more than owners\");\n    require(_threshold >= 1, \"at least one owner\");\n    threshold = _threshold;\n    emit ChangedThreshold(_threshold);\n  }\n\n  function getThreshold() public view returns (uint8) {\n    return threshold;\n  }\n\n  function checkOwner(address owner) public view returns (bool) {\n    return owner != SENTINEL_OWNERS && owners[owner] != address(0);\n  }\n\n  function getOwners() public view returns (address[] memory) {\n    address[] memory _owners = new address[](ownerCount);\n\n    address currentOwner = owners[SENTINEL_OWNERS];\n    for(uint i=0; i<ownerCount; i++) {\n      _owners[i] = currentOwner;\n      currentOwner = owners[currentOwner];\n    }\n    return _owners;\n  }\n\n  modifier notOwner(address _owner) {\n    require(!checkOwner(_owner), \"is one of the owners\");\n    _;\n  }\n\n  modifier isOwner(address _owner) {\n    require(checkOwner(_owner), \"is not one of the owners\");\n    _;\n  }\n}"
    },
    "contracts/handler/TokensHandler.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\";\n\nabstract contract TokensHandler is IERC165, IERC1155Receiver, IERC721Receiver, IERC777Recipient {\n  function onERC1155Received(\n    address,\n    address,\n    uint256,\n    uint256,\n    bytes calldata\n  ) external pure override returns (bytes4) {\n    return 0xf23a6e61;\n  }\n\n  function onERC1155BatchReceived(\n    address,\n    address,\n    uint256[] calldata,\n    uint256[] calldata,\n    bytes calldata\n  ) external pure override returns (bytes4) {\n    return 0xbc197c81;\n  }\n\n  function onERC721Received(\n    address,\n    address,\n    uint256,\n    bytes calldata\n  ) external pure override returns (bytes4) {\n    return 0x150b7a02;\n  }\n\n  // solhint-disable no-empty-blocks\n  function tokensReceived(\n    address,\n    address,\n    address,\n    uint256,\n    bytes calldata,\n    bytes calldata\n  ) external pure override {\n    // We implement this for completeness, doesn't really have any value\n  }\n\n  function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\n    return\n      interfaceId == type(IERC1155Receiver).interfaceId ||\n      interfaceId == type(IERC721Receiver).interfaceId ||\n      interfaceId == type(IERC165).interfaceId;\n  }\n}"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/utils/SelfAuthorized.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0;\n\nabstract contract SelfAuthorized {\n  function _selfCall() private view {\n    require(msg.sender == address(this), \"required self call\");\n  }\n\n  modifier authorized() {\n    _selfCall();\n    _;\n  }\n}"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\n *\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\n * contract implement this interface (contract holders can be their own\n * implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Recipient {\n    /**\n     * @dev Called by an {IERC777} token contract whenever tokens are being\n     * moved or created into a registered account (`to`). The type of operation\n     * is conveyed by `from` being the zero address or not.\n     *\n     * This call occurs _after_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/MultiSigWalletFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0;\n\nimport \"./MultiSigWallet.sol\";\n\n\n/// @title Multi signature wallet factory - Allows creation of multisig wallet.\ncontract MultiSigWalletFactory {\n    event WalletCreated(address creator, address wallet);\n\n    mapping(address => bool) public isWallet;\n    mapping(address => address[]) public wallets;\n\n    /// @dev Returns number of wallets by creator.\n    /// @param creator Contract creator.\n    /// @return count Returns number of wallets by creator.\n    function getWalletsCount(address creator) public view returns (uint256 count) {\n        count = wallets[creator].length;\n    }\n\n    /// @dev Allows verified creation of multisignature wallet.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    /// @return wallet Returns wallet address.\n    function create(address[] memory _owners, uint8 _required) public returns (address wallet) {\n        wallet = address(new MultiSigWallet(_owners, _required));\n        isWallet[wallet] = true;\n        wallets[msg.sender].push(wallet);\n        emit WalletCreated(msg.sender, wallet);\n    }\n}\n"
    },
    "contracts/handler/FallbackHandler.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0;\n\nimport \"./TokensHandler.sol\";\nimport \"../interfaces/ISignatureValidator.sol\";\nimport \"../MultiSigWalletV2.sol\";\n\ncontract FallbackHandler is TokensHandler, ISignatureValidator {\n  //keccak256(\n  //    \"SafeMessage(bytes message)\"\n  //);\n  bytes32 private constant SAFE_MSG_TYPEHASH = 0x60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca;\n\n  bytes4 internal constant SIMULATE_SELECTOR = bytes4(keccak256(\"simulate(address,bytes)\"));\n\n  address internal constant SENTINEL_MODULES = address(0x1);\n  bytes4 internal constant UPDATED_MAGIC_VALUE = 0x1626ba7e;\n\n  function isValidSignature(bytes calldata _data, bytes calldata _signature) public view override returns (bytes4) {\n    MultiSigWalletV2 wallet = MultiSigWalletV2(payable(msg.sender));\n    bytes32 messageHash = _getMessageHash(wallet, _data);\n    if (_signature.length == 0) {\n      require(wallet.signedMessages(messageHash) != 0, \"Hash not approved\");\n    } else {\n      wallet.checkSignatures(messageHash, _data, _signature);\n    }\n    return EIP1271_MAGIC_VALUE;\n  }\n\n  function getMessageHash(bytes memory message) public view returns (bytes32) {\n    return _getMessageHash(MultiSigWalletV2(payable(msg.sender)), message);\n  }\n\n  function _getMessageHash(MultiSigWalletV2 wallet, bytes memory message) public view returns (bytes32) {\n    bytes32 messageHash = keccak256(abi.encode(SAFE_MSG_TYPEHASH, keccak256(message)));\n    return keccak256(abi.encodePacked(bytes1(0x19), bytes1(0x01), wallet.domainSeparator(), messageHash));\n  }\n\n  function isValidSignature(bytes32 _dataHash, bytes calldata _signature) external view returns (bytes4) {\n    ISignatureValidator validator = ISignatureValidator(msg.sender);\n    bytes4 value = validator.isValidSignature(abi.encode(_dataHash), _signature);\n    return (value == EIP1271_MAGIC_VALUE) ? UPDATED_MAGIC_VALUE : bytes4(0);\n  }\n}"
    },
    "contracts/interfaces/ISignatureValidator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0;\n\ncontract ISignatureValidatorConstants {\n  // bytes4(keccak256(\"isValidSignature(bytes,bytes)\")\n  bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;\n}\n\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\n  function isValidSignature(bytes memory _data, bytes memory _signature) external view virtual returns (bytes4);\n}"
    },
    "contracts/MultiSigWalletV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\n// import \"@openzeppelin/contracts-upgradeable/proxy/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./libraries/FullMath.sol\";\nimport \"./interfaces/ISignatureValidator.sol\";\nimport \"./utils/Types.sol\";\nimport \"./utils/SignatureDecoder.sol\";\nimport \"./base/OwnerManager.sol\";\nimport \"./base/ModuleManager.sol\";\nimport \"./base/FallbackManager.sol\";\nimport \"./base/GuardManager.sol\";\n\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\ncontract MultiSigWalletV2 is \n  Initializable,\n  OwnableUpgradeable,\n  // UUPSUpgradeable,\n  OwnerManager, \n  ModuleManager, \n  FallbackManager, \n  GuardManager,\n  SignatureDecoder,\n  ISignatureValidatorConstants\n{\n  using FullMath for uint256;\n\n  string public constant VERSION = \"0.4.0\";\n\n  // keccak256(\n  //     \"EIP712Domain(uint256 chainId,address verifyingContract)\"\n  // );\n  bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\n\n  // keccak256(\n  //     \"SafeTx(uint8 operation,address to,uint256 value,bytes data,uint256 txGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 nonce)\"\n  // );\n  bytes32 private constant SAFE_TX_TYPEHASH = 0x83d2ee3bbf5c35a5a8a0fb99a9df8b955b61832c5fa64df35730090baf04763e;\n\n  event Setup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\n  event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\n  event SignMsg(bytes32 indexed msgHash);\n  event ExecutionFailure(bytes32 txHash, uint256 payment);\n  event ExecutionSuccess(bytes32 txHash, uint256 payment);\n  event Received(address indexed sender, uint256 value);\n\n  uint256 public nonce;\n  mapping(bytes32 => uint256) public signedMessages;\n  mapping(address => mapping(bytes32 => uint256)) public approvedHashes;\n\n  /// @dev Fallback function accepts Ether transactions.\n  receive() external payable {\n    emit Received(msg.sender, msg.value);\n  }\n\n  function setup(\n    address[] calldata _owners,\n    uint8 _threshold,\n    address to,\n    bytes calldata data,\n    address fallbackHandler,\n    address paymentToken,\n    uint256 payment,\n    address payable paymentReceiver\n  ) public initializer {\n    __Ownable_init();\n    setupOwners(_owners, _threshold);\n    if(fallbackHandler != address(0)) _setupFallbackHandler(fallbackHandler);\n    setupModules(to, data);\n\n    if(payment > 0) {\n      handlePayment(payment, 0, 1, paymentToken, paymentReceiver);\n    }\n    emit Setup(msg.sender, _owners, _threshold, to, fallbackHandler);\n  }\n\n  // // solhint-disable-next-line no-empty-blocks\n  // function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n\n  function execTransaction(\n    Types.Operation operation,\n    address to,\n    uint256 value,\n    bytes calldata data,\n    uint256 txGas,\n    uint256 baseGas,\n    uint256 gasPrice,\n    address gasToken,\n    address payable refundReceiver,\n    bytes memory signatures\n  ) public payable virtual returns (bool success) {\n    bytes32 txHash;\n    {\n      bytes memory txHashData =\n        encodeTransactionData(\n          operation,\n          to,\n          value,\n          data,\n          txGas,\n          // Payment info\n          baseGas,\n          gasPrice,\n          gasToken,\n          refundReceiver,\n          // Signature info\n          nonce\n        );\n      nonce++;\n      txHash = keccak256(txHashData);\n      checkSignatures(txHash, txHashData, signatures);\n    }\n    address guard = getGuard(); \n    if(guard != address(0)) {\n      IGuard(guard).checkTransaction(\n        operation, \n        to, \n        value, \n        data, \n        txGas, \n        baseGas, \n        gasPrice, \n        gasToken, \n        refundReceiver, \n        signatures, \n        msg.sender\n      );\n    }\n    require(gasleft() >= ((txGas * 64) / 63).max(txGas + 2500) + 500, \"not enough gas to exec tx\");\n    {\n      uint256 gasUsed = gasleft();\n      success = execute(operation, to, value, data, gasPrice == 0 ? (gasleft() - 2500) : txGas);\n      gasUsed -= gasleft();\n      require(success || gasPrice != 0 || txGas != 0, \"not possible to estimateGas\");\n      uint256 payment = 0;\n      if(gasPrice > 0) {\n        payment = handlePayment(gasUsed, baseGas, gasPrice, gasToken, refundReceiver);\n      }\n      if(success) emit ExecutionSuccess(txHash, payment);\n      else emit ExecutionFailure(txHash, payment);\n    }\n    if(guard != address(0)) {\n      IGuard(guard).checkAfterExecution(txHash, success);\n    }\n  }\n\n  function handlePayment(\n    uint256 gasUsed,\n    uint256 baseGas,\n    uint256 gasPrice,\n    address gasToken,\n    address payable refundReceiver\n  ) private returns (uint256 payment) {\n    // solhint-disable-next-line avoid-tx-origin\n    address payable receiver = refundReceiver == address(0) ? payable(tx.origin) : refundReceiver;\n    if(gasToken == address(0)) {\n      payment = gasUsed.add(baseGas).mul(gasPrice.min(tx.gasprice));\n      require(receiver.send(payment), \"payment fail\");\n    } else {\n      payment = gasUsed.add(baseGas).mul(gasPrice);\n      require(transferToken(gasToken, refundReceiver, payment), \"payment fail\");\n    }\n  }\n\n  function checkSignatures(\n    bytes32 txHash,\n    bytes memory txHashData,\n    bytes memory signatures\n  ) public view {\n    uint8 _threshold = threshold;\n    _checkSignatures(txHash, txHashData, signatures, _threshold);\n  }\n\n\n  function _checkSignatures(\n    bytes32 txHash,\n    bytes memory txHashData,\n    bytes memory signatures,\n    uint8 _threshold\n  ) internal view {\n    require(signatures.length >= _threshold * 65, \"signatures is too short\");\n    address lastOwner = address(0);\n    address currentOwner;\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n    uint256 i;\n    for(i=0; i<_threshold; i++) {\n      (v, r, s) = signatureSplit(signatures, i);\n      if (v == 0) {\n        // If v is 0 then it is a contract signature\n        currentOwner = address(uint160(uint256(r)));\n        require(uint256(s) >= _threshold * 65, \"\");\n        require(uint256(s).add(32) <= signatures.length, \"'s' is out of bound\");\n        uint256 contractSignatureLen;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            contractSignatureLen := mload(add(add(signatures, s), 0x20))\n        }\n        require(uint256(s).add(32).add(contractSignatureLen) <= signatures.length, \"GS023\");\n\n        bytes memory contractSignature;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n          // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\n          contractSignature := add(add(signatures, s), 0x20)\n        }\n        require(ISignatureValidator(currentOwner).isValidSignature(txHashData, contractSignature) == EIP1271_MAGIC_VALUE, \"GS024\");\n      } else if (v == 1) {\n        // If v is 1 then it is an approved hash\n        currentOwner = address(uint160(uint256(r)));\n        require(msg.sender == currentOwner || approvedHashes[currentOwner][txHash] != 0, \"the message have been approved\");\n      } else if (v > 30) {\n        currentOwner = ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", txHash)), v - 4, r, s);\n      } else {\n        currentOwner = ecrecover(txHash, v, r, s);\n      }\n      require(currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS, \"GS026\");\n      lastOwner = currentOwner;\n    }\n  }\n\n  function approveHash(bytes32 txHash) external {\n    require(owners[msg.sender] != address(0), \"only one of owners can approve\");\n    approvedHashes[msg.sender][txHash] = 1;\n    emit ApproveHash(txHash, msg.sender);\n  }\n\n  function encodeTransactionData(\n    Types.Operation operation,\n    address to,\n    uint256 value,\n    bytes calldata data,\n    uint256 txGas,\n    uint256 baseGas,\n    uint256 gasPrice,\n    address gasToken,\n    address refundReceiver,\n    uint256 _nonce\n  ) public view returns (bytes memory) {\n    bytes32 txHash = keccak256(abi.encode(\n      SAFE_TX_TYPEHASH,\n      operation,\n      to,\n      value,\n      data,\n      txGas,\n      baseGas,\n      gasPrice,\n      gasToken,\n      refundReceiver,\n      _nonce\n    ));\n    return abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), txHash);\n  }\n\n  function getTransactionHash(\n    Types.Operation operation,\n    address to,\n    uint256 value,\n    bytes calldata data,\n    uint256 txGas,\n    uint256 baseGas,\n    uint256 gasPrice,\n    address gasToken,\n    address refundReceiver,\n    uint256 _nonce\n  ) public view returns (bytes32) {\n    return keccak256(encodeTransactionData(operation, to, value, data, txGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce));\n  }\n\n  function getChainId() public view returns (uint256 id) {\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      id := chainid()\n    }\n  }\n\n  function domainSeparator() public view returns (bytes32) {\n    return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, getChainId(), this));\n  }\n\n  function transferToken(\n    address token,\n    address receiver,\n    uint256 amount\n  ) internal returns (bool transferred) {\n    // 0xa9059cbb - keccack(\"transfer(address,uint256)\")\n    bytes memory data = abi.encodeWithSelector(0xa9059cbb, receiver, amount);\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      // We write the return value to scratch space.\n      // See https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory\n      let success := call(sub(gas(), 10000), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n      switch returndatasize()\n        case 0 {\n          transferred := success\n        }\n        case 0x20 {\n          transferred := iszero(or(iszero(success), iszero(mload(0))))\n        }\n        default {\n          transferred := 0\n        }\n    }\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\nimport \"../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0;\n\nlibrary FullMath {\n  /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n        return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, \"multiply overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a, \"subtract overflow\");\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a, \"add overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the largest of two numbers.\n    */\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  /**\n    * @dev Returns the smallest of two numbers.\n    */\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}"
    },
    "contracts/utils/SignatureDecoder.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0;\n\nimport \"../libraries/FullMath.sol\";\n\nabstract contract SignatureDecoder {\n  function signatureSplit(bytes memory signatures, uint256 pos)\n    internal\n    pure\n    returns (\n      uint8 v,\n      bytes32 r,\n      bytes32 s\n    )\n  {\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      let signaturePos := mul(0x41, pos)\n      r := mload(add(signatures, add(signaturePos, 0x20)))\n      s := mload(add(signatures, add(signaturePos, 0x40)))\n      // Here we are loading the last 32 bytes, including 31 bytes\n      // of 's'. There is no 'mload8' to do this.\n      //\n      // 'byte' is not working due to the Solidity parser, so lets\n      // use the second best option, 'and'\n      v := and(mload(add(signatures, add(signaturePos, 0x41))), 0xff)\n    }\n  }\n}"
    },
    "contracts/base/ModuleManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0;\nimport \"../utils/SelfAuthorized.sol\";\nimport \"../utils/Types.sol\";\nimport \"./Executor.sol\";\n\ncontract ModuleManager is SelfAuthorized, Executor {\n  event EnabledModule(address module);\n  event DisabledModule(address module);\n  event ExecutionFromModuleSuccess(address indexed module);\n  event ExecutionFromModuleFailure(address indexed module);\n\n  address internal constant SENTINEL_MODULES = address(0x1);\n  mapping(address => address) internal modules;\n\n  function setupModules(address to, bytes memory data) internal {\n    require(modules[SENTINEL_MODULES] == address(0), \"can only be called once\");\n    modules[SENTINEL_MODULES] = SENTINEL_MODULES;\n    \n    if(to != address(0)) {\n      require(execute(Types.Operation.DelegateCall, to, 0, data, gasleft()), \"transaction fails\");\n    }\n  }\n\n  function enableModule(address module) public authorized {\n    require(module != address(0) && module != address(this) && module != SENTINEL_MODULES, \"invalid module address\");\n    require(modules[module] != address(0), \"dup module address\");\n    modules[module] = SENTINEL_MODULES;\n    modules[SENTINEL_MODULES] = module;\n    emit EnabledModule(module);\n  }\n\n  function disableModule(address prevModule, address module) public authorized {\n    require(module != address(0) && module != address(this) && module != SENTINEL_MODULES, \"invalid module address\");\n    require(modules[prevModule] == module, \"not correspond to the module\");\n    modules[prevModule] = modules[module];\n    modules[module] = address(0);\n    emit DisabledModule(module);\n  }\n\n  function execTransactionFromModule(\n    Types.Operation operation, \n    address to, \n    uint256 value, \n    bytes memory data\n  ) public virtual returns(bool success) {\n    require(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0), \"not allowed module\");\n    success = execute(operation, to, value, data, gasleft());\n    if(success) emit ExecutionFromModuleSuccess(msg.sender);\n    else emit ExecutionFromModuleFailure(msg.sender);\n  }\n\n  function execTransactionFromModuleReturnData(\n    Types.Operation operation, \n    address to, \n    uint256 value, \n    bytes memory data\n  ) public virtual returns(bool success, bytes memory returnData) {\n    require(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0), \"not allowed module\");\n    success = execTransactionFromModule(operation, to, value, data);\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      let ptr := mload(0x40)\n      mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\n      mstore(ptr, returndatasize())\n      returndatacopy(add(ptr, 0x20), 0, returndatasize())\n      returnData := ptr\n    }\n  }\n\n  function isModuleEnabled(address module) public view returns(bool) {\n    return module != SENTINEL_MODULES && modules[module] != address(0);\n  }\n\n  function getModulePagenated(address start, uint256 pageSize) external view returns(address[] memory array, address next) {\n    array = new address[](pageSize);\n\n    uint256 moduleCount = 0;\n    address currentModule = modules[start];\n    while(currentModule != address(0) && currentModule != SENTINEL_MODULES && moduleCount < pageSize) {\n      array[moduleCount] = currentModule;\n      currentModule = modules[currentModule];\n      moduleCount++;\n    }\n    next = currentModule;\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      mstore(array, moduleCount)\n    }\n  }\n} "
    },
    "contracts/base/FallbackManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0;\nimport \"../utils/SelfAuthorized.sol\";\n\ncontract FallbackManager is SelfAuthorized {\n  event ChangedFallbackHandler(address handler);\n\n  // keccak256(\"fallback_manager.handler.address\")\n  bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\n\n  function _setupFallbackHandler(address handler) internal {\n    bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      sstore(slot, handler)\n    }\n  }\n\n  function setFallbackHandler(address handler) public authorized {\n    _setupFallbackHandler(handler);\n    emit ChangedFallbackHandler(handler);\n  }\n\n  // solhint-disable-next-line payable-fallback,no-complex-fallback\n  fallback() external {\n    bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      let handler := sload(slot)\n      if iszero(handler) {\n        return(0, 0)\n      }\n      calldatacopy(0, 0, calldatasize())\n      mstore(calldatasize(), shl(96, caller()))\n      let success := call(gas(), handler, 0, 0, add(calldatasize(), 20), 0, 0)\n      returndatacopy(0, 0, returndatasize())\n      if iszero(success) {\n        revert(0, returndatasize())\n      }\n      return(0, returndatasize())\n    }\n  }\n}"
    },
    "contracts/base/GuardManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0;\nimport \"../utils/Types.sol\";\nimport \"../utils/SelfAuthorized.sol\";\n\ninterface IGuard {\n  function checkTransaction(\n    Types.Operation operation,\n    address to,\n    uint256 value,\n    bytes memory data,\n    uint256 safeTxGas,\n    uint256 baseGas,\n    uint256 gasPrice,\n    address gasToken,\n    address payable refundReceiver,\n    bytes memory signatures,\n    address from\n  ) external;\n\n  function checkAfterExecution(bytes32 txHash, bool success) external;\n}\n\ncontract GuardManager is SelfAuthorized {\n  event ChangedGuard(address guard);\n  // keccak256(\"guard_manager.guard.address\")\n  bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\n\n  function setGuard(address guard) public authorized {\n    bytes32 slot = GUARD_STORAGE_SLOT;\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      sstore(slot, guard)\n    }\n    emit ChangedGuard(guard);\n  }\n\n  function getGuard() public view returns(address guard) {\n    bytes32 slot = GUARD_STORAGE_SLOT;\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      guard := sload(slot)\n    }\n  }\n}"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}