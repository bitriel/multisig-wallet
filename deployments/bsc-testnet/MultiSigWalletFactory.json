{
  "address": "0x07eAA6D0EB75de219340a485d1F31d1871e1760B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "upgrader",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "WalletCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "createWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint8",
          "name": "_required",
          "type": "uint8"
        }
      ],
      "name": "createWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "wallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2df5d4c7287b038ab9dc8abbd0faf307b2e321a43d59834e8c9d8c4ffc51363e",
  "receipt": {
    "to": null,
    "from": "0x4861a4D127A206Af02f427aF515286E2FD3D7B03",
    "contractAddress": "0x07eAA6D0EB75de219340a485d1F31d1871e1760B",
    "transactionIndex": 19,
    "gasUsed": "3024064",
    "logsBloom": "0x00000000000000000000000000000040000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000040001000000000000020000000000000000000800000000000000000000000000000000400000000000000000000082000000004000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000080000000000000000000000000",
    "blockHash": "0x9d8e0ab64dc7d6ad9582a09e2e041b86cac9d514d2d81a9ad686e495c1eb7cc7",
    "transactionHash": "0x2df5d4c7287b038ab9dc8abbd0faf307b2e321a43d59834e8c9d8c4ffc51363e",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 15787847,
        "transactionHash": "0x2df5d4c7287b038ab9dc8abbd0faf307b2e321a43d59834e8c9d8c4ffc51363e",
        "address": "0x87c5f710Aca08559CE5F1cBBdA2d8d30F2Ba2c46",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000007eaa6d0eb75de219340a485d1f31d1871e1760b"
        ],
        "data": "0x",
        "logIndex": 48,
        "blockHash": "0x9d8e0ab64dc7d6ad9582a09e2e041b86cac9d514d2d81a9ad686e495c1eb7cc7"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 15787847,
        "transactionHash": "0x2df5d4c7287b038ab9dc8abbd0faf307b2e321a43d59834e8c9d8c4ffc51363e",
        "address": "0x87c5f710Aca08559CE5F1cBBdA2d8d30F2Ba2c46",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000007eaa6d0eb75de219340a485d1f31d1871e1760b",
          "0x0000000000000000000000004861a4d127a206af02f427af515286e2fd3d7b03"
        ],
        "data": "0x",
        "logIndex": 49,
        "blockHash": "0x9d8e0ab64dc7d6ad9582a09e2e041b86cac9d514d2d81a9ad686e495c1eb7cc7"
      }
    ],
    "blockNumber": 15787847,
    "cumulativeGasUsed": "6727612",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4861a4D127A206Af02f427aF515286E2FD3D7B03"
  ],
  "solcInputHash": "697f0261d092e2cb41f0f5a3bd9ea2db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"upgrader\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"WalletCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"createWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_required\",\"type\":\"uint8\"}],\"name\":\"createWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createWallet(address[],uint8)\":{\"details\":\"Allows verified creation of multisignature wallet.\",\"params\":{\"_owners\":\"List of initial owners.\",\"_required\":\"Number of required confirmations.\"},\"returns\":{\"wallet\":\"Returns wallet address.\"}},\"createWallet(bytes)\":{\"details\":\"Allows verified creation of multisignature wallet.\",\"params\":{\"data\":\"data payload for initialize a wallet.\"},\"returns\":{\"wallet\":\"Returns wallet address.\"}}},\"title\":\"Multi signature wallet factory - Allows creation of multisig wallet.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MultiSigWalletFactory.sol\":\"MultiSigWalletFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f4c3eed093dfb0e4e20c1c102d2f2c6894a972f454adb308511a0afb37e6f79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xab2556b154ceb1a11e456f2827ca8f6f65242b1b2fcc00268ab6d38fc6e64bbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1));\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n}\\n\",\"keccak256\":\"0x54878f0d2f40b5e13f84977bcd3c71d4c38581414e7efb4909cb16dd3ace392f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec71aef5659f3f74011169948d2fcda8c6599be5bb38f986380a8737f96cc0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x94dd781aa290742d990ccb720b3cab52a3865d1ba004e35c1dc757aa3ee788e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Recipient.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1a5d61db2733202ba361e6d6741cd2e662380e22b80e987eacfc91973f2267dc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MultiSigWallet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"./utils/Types.sol\\\";\\nimport \\\"./base/OwnerManager.sol\\\";\\nimport \\\"./base/Executor.sol\\\";\\nimport \\\"./handler/TokensHandler.sol\\\";\\n\\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\\ncontract MultiSigWallet is OwnerManager, Executor, TokensHandler, Initializable {\\n  event Received(address indexed sender, uint256 value);\\n  event TransactionApproved(address indexed sender, uint256 indexed transactionId);\\n  event ApprovalRevoked(address indexed sender, uint256 indexed transactionId);\\n  event TransactionSubmitted(uint256 indexed transactionId);\\n  event TransactionExecuted(uint256 indexed transactionId);\\n  event ExecutionFailed(uint256 indexed transactionId);\\n\\n  struct Transaction {\\n    Types.Operation operation;\\n    address target;\\n    uint256 value;\\n    bytes data;\\n    uint8 approval;\\n    bool executed;\\n  }\\n\\n  uint8 constant public MAX_OWNER = 50;\\n\\n  mapping (uint256 => Transaction) public transactions;\\n  mapping (uint256 => mapping (address => bool)) public approvals;\\n  uint256 public transactionCount;\\n\\n  /// @dev sets initial owners and required number of confirmations.\\n  /// @param _owners List of initial owners.\\n  /// @param _required Number of required confirmations.\\n  function initialize(address[] memory _owners, uint8 _required) public initializer {\\n    setupOwners(_owners, _required);\\n  }\\n\\n  /// @dev deposit native token into this contract.\\n  receive() external payable {\\n    emit Received(msg.sender, msg.value);\\n  }\\n\\n  /// @dev Allows an owner to submit and approve a transaction.\\n  /// @param operation external call operation\\n  /// @param target transaction destination address\\n  /// @param value transaction value in Wei.\\n  /// @param data transaction data payload.\\n  /// @return txnId returns transaction ID.\\n  function submitTransaction(\\n    Types.Operation operation, \\n    address target, \\n    uint256 value, \\n    bytes memory data\\n  ) public returns (uint256 txnId) \\n  {\\n    txnId = _addTransaction(operation, target, value, data);\\n    approve(txnId);\\n  }\\n\\n  /// @dev Allows an owner to approve a transaction.\\n  /// @param _txnId transaction ID.\\n  function approve(uint256 _txnId) public\\n    isOwner(msg.sender)\\n    hasTransaction(_txnId)\\n    notApproved(_txnId, msg.sender)\\n  {\\n    transactions[_txnId].approval++;\\n    approvals[_txnId][msg.sender] = true;\\n\\n    emit TransactionApproved(msg.sender, _txnId);\\n    executeTransaction(_txnId);\\n  }\\n\\n  /// @dev Allows an owner to revoke a approval for a transaction.\\n  /// @param _txnId transaction ID.\\n  function revokeApproval(uint256 _txnId) external\\n    isOwner(msg.sender)\\n    approved(_txnId, msg.sender)\\n    notExecuted(_txnId)\\n  {\\n    transactions[_txnId].approval--;\\n    approvals[_txnId][msg.sender] = false;\\n    \\n    emit ApprovalRevoked(msg.sender, _txnId);\\n  }\\n\\n  /// @dev Allows anyone to execute a approved transaction.\\n  /// @param _txnId transaction ID.\\n  /// @return success wether it's success\\n  function executeTransaction(uint256 _txnId) public\\n    isOwner(msg.sender)\\n    approved(_txnId, msg.sender)\\n    notExecuted(_txnId)\\n    returns (bool success)\\n  {\\n    if (isConfirmed(_txnId)) {\\n      Transaction storage txn = transactions[_txnId];\\n      success = execute(txn.operation, txn.target, txn.value, txn.data, (gasleft() - 2500));\\n      if (success) {\\n        txn.executed = true;\\n        emit TransactionExecuted(_txnId);\\n      } else {\\n        txn.executed = false;\\n        emit ExecutionFailed(_txnId);\\n      }\\n    }\\n  }\\n\\n  /// @dev Returns the confirmation status of a transaction.\\n  /// @param _txnId transaction ID.\\n  /// @return status confirmation status.\\n  function isConfirmed(uint _txnId) public view returns (bool status) {\\n    status = transactions[_txnId].approval >= getThreshold();\\n  }\\n\\n  /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\\n  /// @param operation external call operation\\n  /// @param target transaction destination address\\n  /// @param value transaction value in Wei.\\n  /// @param data transaction data payload.\\n  /// @return txnId returns transaction ID.\\n  function _addTransaction(\\n    Types.Operation operation, \\n    address target, \\n    uint256 value, \\n    bytes memory data\\n  ) internal\\n    isValid(target)\\n    returns (uint txnId)\\n  {\\n    txnId = ++transactionCount;\\n    transactions[txnId] = Transaction({\\n      operation: operation,\\n      target: target,\\n      value: value,\\n      data: data,\\n      approval: 0,\\n      executed: false\\n    });\\n    \\n    emit TransactionSubmitted(txnId);\\n  }\\n\\n  /// @dev Returns number of approvals of a transaction.\\n  /// @param _txnId transaction ID.\\n  /// @return count Number of approvals.\\n  function getApprovalCount(uint _txnId) external view returns (uint8 count) {\\n    count = transactions[_txnId].approval;\\n  }\\n\\n  /// @dev Returns total number of transactions which filers are applied.\\n  /// @param _pending Include pending transactions.\\n  /// @param _executed Include executed transactions.\\n  /// @return count Total number of transactions after filters are applied.\\n  function getTransactionCount(bool _pending, bool _executed) external view returns (uint256 count)\\n  {\\n    for (uint256 i=0; i<transactionCount; i++)\\n      if (_pending && !transactions[i].executed || _executed && transactions[i].executed)\\n        count++;\\n  }\\n\\n  modifier hasTransaction(uint256 _txnId) {\\n    require(_txnId < transactionCount, \\\"transaction is not exist\\\");\\n    _;\\n  }\\n\\n  modifier approved(uint256 _txnId, address _owner) {\\n    require(approvals[_txnId][_owner], \\\"not been approved by this owner\\\");\\n    _;\\n  }\\n\\n  modifier notApproved(uint256 _txnId, address _owner) {\\n    require(!approvals[_txnId][_owner], \\\"has been approved by this owner\\\");\\n    _;\\n  }\\n\\n  modifier notExecuted(uint256 _txnId) {\\n    require(!transactions[_txnId].executed, \\\"transaction is executed\\\");\\n    _;\\n  }\\n\\n  modifier isValid(address _address) {\\n    require(_address != address(0), \\\"this address is zero address\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x6b03305e1e5c111bcc78785acf7e4e3cfa1704e0e3a9a07e88303f243ca8e263\",\"license\":\"GPL-3.0\"},\"contracts/MultiSigWalletFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\nimport \\\"./MultiSigWallet.sol\\\";\\n\\n/// @title Multi signature wallet factory - Allows creation of multisig wallet.\\ncontract MultiSigWalletFactory {\\n    event WalletCreated(address creator, address wallet);\\n\\n    address immutable private multisigWalletBeacon;\\n    address[] public wallets;\\n\\n    constructor(address upgrader) {\\n        UpgradeableBeacon _multisigWalletBeacon = new UpgradeableBeacon(address(new MultiSigWallet()));\\n        _multisigWalletBeacon.transferOwnership(upgrader);\\n        multisigWalletBeacon = address(_multisigWalletBeacon);\\n    }\\n\\n    /// @dev Allows verified creation of multisignature wallet.\\n    /// @param _owners List of initial owners.\\n    /// @param _required Number of required confirmations.\\n    /// @return wallet Returns wallet address.\\n    function createWallet(address[] memory _owners, uint8 _required) external returns (address wallet) {\\n        BeaconProxy proxy = new BeaconProxy(\\n            multisigWalletBeacon,\\n            abi.encodeWithSelector(MultiSigWallet.initialize.selector, _owners, _required)\\n        );\\n        wallet = address(proxy);\\n        wallets.push(wallet);\\n        emit WalletCreated(msg.sender, wallet);\\n    }\\n\\n    /// @dev Allows verified creation of multisignature wallet.\\n    /// @param data data payload for initialize a wallet.\\n    /// @return wallet Returns wallet address.\\n    function createWallet(bytes calldata data) external returns (address wallet) {\\n        BeaconProxy proxy = new BeaconProxy(\\n            multisigWalletBeacon,\\n            data\\n        );\\n        wallet = address(proxy);\\n        wallets.push(address(proxy));\\n        emit WalletCreated(msg.sender, address(proxy));\\n    }\\n}\\n\",\"keccak256\":\"0x11359a5e4e052fec15837c07d541a35491c3bad4737554f98d74c5aeea620405\",\"license\":\"GPL-3.0\"},\"contracts/base/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../utils/Types.sol\\\";\\n\\nabstract contract Executor {\\n  function execute(\\n    Types.Operation operation,\\n    address target,\\n    uint256 value,\\n    bytes memory data,\\n    uint256 txGas\\n  ) internal returns (bool success) {\\n    if(operation == Types.Operation.Call) {\\n      // solhint-disable-next-line no-inline-assembly\\n      assembly {\\n        success := call(txGas, target, value, add(data, 0x20), mload(data), 0, 0)\\n      }\\n    } else {\\n      // solhint-disable-next-line no-inline-assembly\\n      assembly {\\n        success :=delegatecall(txGas, target, add(data, 0x20), mload(data), 0, 0)\\n      }\\n    }\\n  }\\n}\",\"keccak256\":\"0xc384ab01550a10f345b7146e7a37190a6150687db1672c22fc6de74df3d26391\",\"license\":\"GPL-3.0\"},\"contracts/base/OwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../utils/SelfAuthorized.sol\\\";\\n\\nabstract contract OwnerManager is SelfAuthorized {\\n  event AddedOwner(address owner);\\n  event RemovedOwner(address owner);\\n  event ChangedThreshold(uint8 threshold);\\n\\n  address internal constant SENTINEL_OWNERS = address(0x1);\\n  mapping(address => address) internal owners;\\n  uint256 internal ownerCount;\\n  uint8 internal threshold;\\n\\n  function setupOwners(address[] memory _owners, uint8 _threshold) internal {\\n    require(threshold == 0, \\\"can only be called once\\\");\\n    require(_threshold <= _owners.length, \\\"threshold is more than owners\\\");\\n    require(_threshold >= 1, \\\"at least one owner\\\");\\n    address currentOwner = SENTINEL_OWNERS;\\n    for(uint i=0; i<_owners.length; i++) {\\n      address owner = _owners[i];\\n      require(owner != address(0) && owner != address(this) && owner != currentOwner && owner != SENTINEL_OWNERS, \\\"not allowed owner address\\\");\\n      require(owners[owner] == address(0), \\\"duplicate owner address\\\");\\n      owners[currentOwner] = owner;\\n      currentOwner = owner;\\n    }\\n    owners[currentOwner] = SENTINEL_OWNERS;\\n    ownerCount = _owners.length;\\n    threshold = _threshold;\\n  } \\n\\n  function addOwnerWithThreshold(address owner, uint8 _threshold) public authorized {\\n    require(owner != address(0) && owner != address(this) && owner != SENTINEL_OWNERS, \\\"not allowed owner address\\\");\\n    require(owners[owner] == address(0), \\\"duplicate owner address\\\");\\n    owners[owner] = owners[SENTINEL_OWNERS];\\n    owners[SENTINEL_OWNERS] = owner;\\n    ownerCount++;\\n    emit AddedOwner(owner);\\n\\n    if(threshold != _threshold) changeThreshold(_threshold);\\n  }\\n\\n  function removeOwnerWithThreshold(address prevOwner, address owner, uint8 _threshold) internal authorized {\\n    require(ownerCount - 1 >= _threshold, \\\"threshold can not be reached\\\");\\n    require(owner != address(0) && owner != SENTINEL_OWNERS, \\\"invalid owner address\\\");\\n    require(owners[prevOwner] == owner, \\\"not correspond to the owner\\\");\\n    owners[prevOwner] = owners[owner];\\n    owners[owner] = address(0);\\n    ownerCount--;\\n    emit RemovedOwner(owner);\\n\\n    if(threshold != _threshold) changeThreshold(_threshold);\\n  }\\n\\n  function swapOwner(address prevOwner, address oldOwner, address newOwner) public authorized {\\n    require(newOwner != address(0) && newOwner != address(this) && newOwner != SENTINEL_OWNERS, \\\"invalid new owner address\\\");\\n    require(owners[newOwner] == address(0), \\\"duplicate owner address\\\");\\n    require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, \\\"invalid old owner address\\\");\\n    require(owners[prevOwner] == oldOwner, \\\"not correspond to the oldOwner\\\");\\n    owners[newOwner] = owners[oldOwner];\\n    owners[prevOwner] = newOwner;\\n    owners[oldOwner] = address(0);\\n    emit RemovedOwner(oldOwner);\\n    emit AddedOwner(newOwner);\\n  }\\n\\n  function changeThreshold(uint8 _threshold) public authorized {\\n    require(_threshold <= ownerCount, \\\"threshold is more than owners\\\");\\n    require(_threshold >= 1, \\\"at least one owner\\\");\\n    threshold = _threshold;\\n    emit ChangedThreshold(_threshold);\\n  }\\n\\n  function getThreshold() public view returns (uint8) {\\n    return threshold;\\n  }\\n\\n  function checkOwner(address owner) public view returns (bool) {\\n    return owner != SENTINEL_OWNERS && owners[owner] != address(0);\\n  }\\n\\n  function getOwners() public view returns (address[] memory) {\\n    address[] memory _owners = new address[](ownerCount);\\n\\n    address currentOwner = owners[SENTINEL_OWNERS];\\n    for(uint i=0; i<ownerCount; i++) {\\n      _owners[i] = currentOwner;\\n      currentOwner = owners[currentOwner];\\n    }\\n    return _owners;\\n  }\\n\\n  modifier notOwner(address _owner) {\\n    require(!checkOwner(_owner), \\\"is one of the owners\\\");\\n    _;\\n  }\\n\\n  modifier isOwner(address _owner) {\\n    require(checkOwner(_owner), \\\"is not one of the owners\\\");\\n    _;\\n  }\\n}\",\"keccak256\":\"0x9e02bfb39486bdb9a4cc3fa8c506a69d0ed090d84669d2ad8e2360b348483154\",\"license\":\"GPL-3.0\"},\"contracts/handler/TokensHandler.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\n\\nabstract contract TokensHandler is IERC165, IERC1155Receiver, IERC721Receiver, IERC777Recipient {\\n  function onERC1155Received(\\n    address,\\n    address,\\n    uint256,\\n    uint256,\\n    bytes calldata\\n  ) external pure override returns (bytes4) {\\n    return 0xf23a6e61;\\n  }\\n\\n  function onERC1155BatchReceived(\\n    address,\\n    address,\\n    uint256[] calldata,\\n    uint256[] calldata,\\n    bytes calldata\\n  ) external pure override returns (bytes4) {\\n    return 0xbc197c81;\\n  }\\n\\n  function onERC721Received(\\n    address,\\n    address,\\n    uint256,\\n    bytes calldata\\n  ) external pure override returns (bytes4) {\\n    return 0x150b7a02;\\n  }\\n\\n  // solhint-disable no-empty-blocks\\n  function tokensReceived(\\n    address,\\n    address,\\n    address,\\n    uint256,\\n    bytes calldata,\\n    bytes calldata\\n  ) external pure override {\\n    // We implement this for completeness, doesn't really have any value\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n    return\\n      interfaceId == type(IERC1155Receiver).interfaceId ||\\n      interfaceId == type(IERC721Receiver).interfaceId ||\\n      interfaceId == type(IERC165).interfaceId;\\n  }\\n}\",\"keccak256\":\"0xd5c884d83811e412ace040f85d4830a8bb83c57c8b16aa3adc5d294ae2f79b58\",\"license\":\"GPL-3.0\"},\"contracts/utils/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nabstract contract SelfAuthorized {\\n  function _selfCall() private view {\\n    require(msg.sender == address(this), \\\"required self call\\\");\\n  }\\n\\n  modifier authorized() {\\n    _selfCall();\\n    _;\\n  }\\n}\",\"keccak256\":\"0xf429759512facbb8bf895cb570afcc6560dc170276c9dee6774d818d738c0461\",\"license\":\"GPL-3.0\"},\"contracts/utils/Types.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Types {\\n  enum Operation {Call, DelegateCall}\\n}\",\"keccak256\":\"0x154da3b303402876d1ebcaba13ed8593cdfad00b89e4327036bcd37e92111cfe\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161369038038061369083398101604081905261002f91610122565b600060405161003d90610108565b604051809103906000f080158015610059573d6000803e3d6000fd5b5060405161006690610115565b6001600160a01b039091168152602001604051809103906000f080158015610092573d6000803e3d6000fd5b5060405163f2fde38b60e01b81526001600160a01b0384811660048301529192509082169063f2fde38b90602401600060405180830381600087803b1580156100da57600080fd5b505af11580156100ee573d6000803e3d6000fd5b5050505060601b6001600160601b03191660805250610150565b61213e8061104883390190565b61050a8061318683390190565b600060208284031215610133578081fd5b81516001600160a01b0381168114610149578182fd5b9392505050565b60805160601c610ed46101746000396000818160b101526101a30152610ed46000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c80631733ff9e146200004b57806341e4c5d0146200007e5780637ad71f721462000095575b600080fd5b620000626200005c3660046200037c565b620000ac565b6040516001600160a01b03909116815260200160405180910390f35b620000626200008f36600462000293565b6200019e565b62000062620000a6366004620003ee565b6200022b565b6000807f00000000000000000000000000000000000000000000000000000000000000008484604051620000e09062000256565b620000ee9392919062000407565b604051809103906000f0801580156200010b573d6000803e3d6000fd5b50600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0383169081179091556040805133815260208101929092529193508392507f5b03bfed1c14a02bdeceb5fa582eb1a5765fc0bc64ca0e6af4c20afc9487f081910160405180910390a15092915050565b6000807f0000000000000000000000000000000000000000000000000000000000000000632bbdea4e60e01b8585604051602401620001df929190620004ad565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516200021e9062000256565b620000ee92919062000447565b600081815481106200023c57600080fd5b6000918252602090912001546001600160a01b0316905081565b610982806200051d83390190565b80356001600160a01b03811681146200027c57600080fd5b919050565b803560ff811681146200027c57600080fd5b60008060408385031215620002a6578182fd5b823567ffffffffffffffff80821115620002be578384fd5b818501915085601f830112620002d2578384fd5b8135602082821115620002e957620002e962000506565b8160051b604051601f19603f8301168101818110868211171562000311576200031162000506565b604052838152828101945085830182870184018b101562000330578889fd5b8896505b848710156200035d57620003488162000264565b86526001969096019594830194830162000334565b5096506200036f905087820162000281565b9450505050509250929050565b600080602083850312156200038f578182fd5b823567ffffffffffffffff80821115620003a7578384fd5b818501915085601f830112620003bb578384fd5b813581811115620003ca578485fd5b866020828501011115620003dc578485fd5b60209290920196919550909350505050565b60006020828403121562000400578081fd5b5035919050565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b60018060a01b0383168152600060206040818401528351806040850152825b81811015620004845785810183015185820160600152820162000466565b81811115620004965783606083870101525b50601f01601f191692909201606001949350505050565b604080825283519082018190526000906020906060840190828701845b82811015620004f15781516001600160a01b031684529284019290840190600101620004ca565b50505060ff9490941692019190915250919050565b634e487b7160e01b600052604160045260246000fdfe60806040526040516109823803806109828339810160408190526100229161047d565b61004d60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d51610588565b60008051602061093b8339815191521461007757634e487b7160e01b600052600160045260246000fd5b6100838282600061008a565b50506105ed565b61009383610164565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a26000825111806100d45750805b1561015f5761015d836001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561011557600080fd5b505afa158015610129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014d9190610463565b8361030460201b6100291760201c565b505b505050565b6101778161033060201b6100551760201c565b6101d65760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b610259816001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561021257600080fd5b505afa158015610226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024a9190610463565b61033060201b6100551760201c565b6102be5760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b60648201526084016101cd565b806102e360008051602061093b83398151915260001b61033660201b61005b1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060610329838360405180606001604052806027815260200161095b60279139610339565b9392505050565b3b151590565b90565b6060833b6103985760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016101cd565b600080856001600160a01b0316856040516103b39190610539565b600060405180830381855af49150503d80600081146103ee576040519150601f19603f3d011682016040523d82523d6000602084013e6103f3565b606091505b50909250905061040482828661040e565b9695505050505050565b6060831561041d575081610329565b82511561042d5782518084602001fd5b8160405162461bcd60e51b81526004016101cd9190610555565b80516001600160a01b038116811461045e57600080fd5b919050565b600060208284031215610474578081fd5b61032982610447565b6000806040838503121561048f578081fd5b61049883610447565b60208401519092506001600160401b03808211156104b4578283fd5b818501915085601f8301126104c7578283fd5b8151818111156104d9576104d96105d7565b604051601f8201601f19908116603f01168101908382118183101715610501576105016105d7565b81604052828152886020848701011115610519578586fd5b61052a8360208301602088016105ab565b80955050505050509250929050565b6000825161054b8184602087016105ab565b9190910192915050565b60208152600082518060208401526105748160408501602087016105ab565b601f01601f19169190910160400192915050565b6000828210156105a657634e487b7160e01b81526011600452602481fd5b500390565b60005b838110156105c65781810151838201526020016105ae565b8381111561015d5750506000910152565b634e487b7160e01b600052604160045260246000fd5b61033f806105fc6000396000f3fe60806040523661001357610011610017565b005b6100115b61002761002261005e565b610106565b565b606061004e83836040518060600160405280602781526020016102e36027913961012a565b9392505050565b3b151590565b90565b60006100917fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156100c957600080fd5b505afa1580156100dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610101919061023c565b905090565b3660008037600080366000845af43d6000803e808015610125573d6000f35b3d6000fd5b6060833b61018e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516101a99190610263565b600060405180830381855af49150503d80600081146101e4576040519150601f19603f3d011682016040523d82523d6000602084013e6101e9565b606091505b50915091506101f9828286610203565b9695505050505050565b6060831561021257508161004e565b8251156102225782518084602001fd5b8160405162461bcd60e51b8152600401610185919061027f565b60006020828403121561024d578081fd5b81516001600160a01b038116811461004e578182fd5b600082516102758184602087016102b2565b9190910192915050565b602081526000825180602084015261029e8160408501602087016102b2565b601f01601f19169190910160400192915050565b60005b838110156102cd5781810151838201526020016102b5565b838111156102dc576000848401525b5050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202a47b2fa8138f3011ece0a45caf5d4132ab559a50271fc13b16a67066df819fc64736f6c63430008040033a3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d9f9d4d576d5e4ae8780e8f37c3a455d2e1608615c0e32e2bf8ba0bce7dbb0cd64736f6c63430008040033608060405234801561001057600080fd5b5061211e806100206000396000f3fe6080604052600436106101435760003560e01c8063b1e130fc116100b6578063bc197c811161006f578063bc197c8114610427578063e0e3671c14610456578063e318b52b14610476578063e75235b814610496578063ee22610b146104ae578063f23a6e61146104ce57600080fd5b8063b1e130fc1461035d578063b759f9541461037d578063b77bf6001461039d578063b7f3358d146103b3578063b91a667f146103d3578063ba7e7cab146103f357600080fd5b806372688111116101085780637268811114610267578063784547a71461028e5780638dbcc2e0146102ae5780639ace38c2146102ce578063a0e67e2b14610300578063ab2850da1461032257600080fd5b806223de291461018457806301ffc9a7146101ab578063150b7a02146101e05780632bbdea4e14610219578063547415251461023957600080fd5b3661017f5760405134815233907f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f885258749060200160405180910390a2005b600080fd5b34801561019057600080fd5b506101a961019f366004611a09565b5050505050505050565b005b3480156101b757600080fd5b506101cb6101c6366004611d46565b6104fb565b60405190151581526020015b60405180910390f35b3480156101ec57600080fd5b506102006101fb366004611b47565b61054d565b6040516001600160e01b031990911681526020016101d7565b34801561022557600080fd5b506101a9610234366004611c5c565b61055f565b34801561024557600080fd5b50610259610254366004611d1d565b610633565b6040519081526020016101d7565b34801561027357600080fd5b5061027c603281565b60405160ff90911681526020016101d7565b34801561029a57600080fd5b506101cb6102a9366004611e2b565b6106bc565b3480156102ba57600080fd5b506102596102c9366004611d6e565b6106f0565b3480156102da57600080fd5b506102ee6102e9366004611e2b565b610711565b6040516101d796959493929190611ecc565b34801561030c57600080fd5b506103156107e1565b6040516101d79190611e7f565b34801561032e57600080fd5b506101cb61033d366004611e43565b600460209081526000928352604080842090915290825290205460ff1681565b34801561036957600080fd5b506101a9610378366004611e2b565b6108eb565b34801561038957600080fd5b506101a9610398366004611e2b565b610a6e565b3480156103a957600080fd5b5061025960055481565b3480156103bf57600080fd5b506101a96103ce366004611e65565b610bed565b3480156103df57600080fd5b506101a96103ee366004611c2a565b610cdb565b3480156103ff57600080fd5b5061027c61040e366004611e2b565b6000908152600360208190526040909120015460ff1690565b34801561043357600080fd5b50610200610442366004611ab1565b63bc197c8160e01b98975050505050505050565b34801561046257600080fd5b506101cb6104713660046119a6565b610e65565b34801561048257600080fd5b506101a96104913660046119c7565b610e9d565b3480156104a257600080fd5b5060025460ff1661027c565b3480156104ba57600080fd5b506101cb6104c9366004611e2b565b611102565b3480156104da57600080fd5b506102006104e9366004611bb4565b63f23a6e6160e01b9695505050505050565b60006001600160e01b03198216630271189760e51b148061052c57506001600160e01b03198216630a85bd0160e11b145b8061054757506001600160e01b031982166301ffc9a760e01b145b92915050565b630a85bd0160e11b5b95945050505050565b60025462010000900460ff1661058057600254610100900460ff1615610584565b303b155b6105ec5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b60025462010000900460ff16158015610611576002805462ffff001916620101001790555b61061b8383611366565b801561062e576002805462ff0000191690555b505050565b6000805b6005548110156106b557838015610666575060008181526003602081905260409091200154610100900460ff16155b806106905750828015610690575060008181526003602081905260409091200154610100900460ff165b156106a3578161069f81612081565b9250505b806106ad81612081565b915050610637565b5092915050565b60006106ca60025460ff1690565b60009283526003602081905260409093209092015460ff92831692169190911015919050565b60006106fe858585856115f8565b905061070981610a6e565b949350505050565b60036020526000908152604090208054600182015460028301805460ff8416946101009094046001600160a01b031693919061074c90612046565b80601f016020809104026020016040519081016040528092919081815260200182805461077890612046565b80156107c55780601f1061079a576101008083540402835291602001916107c5565b820191906000526020600020905b8154815290600101906020018083116107a857829003601f168201915b5050506003909301549192505060ff8082169161010090041686565b6060600060015467ffffffffffffffff81111561080e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610837578160200160208202803683370190505b506001600090815260208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d549192506001600160a01b03909116905b6001548110156108e357818382815181106108a157634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920181019190915292811660009081529283905260409092205490911690806108db81612081565b915050610876565b509092915050565b336108f581610e65565b6109115760405162461bcd60e51b81526004016105e390611f73565b60008281526004602090815260408083203380855292529091205483919060ff1661097e5760405162461bcd60e51b815260206004820152601f60248201527f6e6f74206265656e20617070726f7665642062792074686973206f776e65720060448201526064016105e3565b600084815260036020819052604090912001548490610100900460ff16156109e25760405162461bcd60e51b81526020600482015260176024820152761d1c985b9cd858dd1a5bdb881a5cc8195e1958dd5d1959604a1b60448201526064016105e3565b6000858152600360208190526040822001805460ff1691610a0283612029565b825460ff9182166101009390930a9283029190920219909116179055506000858152600460209081526040808320338085529252808320805460ff191690555187927f3e776e19fc0f05c1b8270744b61c5729d5d1a5d8dded1bfb81e3979e257edd5991a35050505050565b33610a7881610e65565b610a945760405162461bcd60e51b81526004016105e390611f73565b816005548110610ae65760405162461bcd60e51b815260206004820152601860248201527f7472616e73616374696f6e206973206e6f74206578697374000000000000000060448201526064016105e3565b60008381526004602090815260408083203380855292529091205484919060ff1615610b545760405162461bcd60e51b815260206004820152601f60248201527f686173206265656e20617070726f7665642062792074686973206f776e65720060448201526064016105e3565b6000858152600360208190526040822001805460ff1691610b748361209c565b825460ff9182166101009390930a9283029190920219909116179055506000858152600460209081526040808320338085529252808320805460ff191660011790555187927f7b19c08b12f940ea76949b68d355070966056a862ad2c1aa6676ecbcc9538a6191a3610be585611102565b505050505050565b610bf56117ad565b6001548160ff161115610c4a5760405162461bcd60e51b815260206004820152601d60248201527f7468726573686f6c64206973206d6f7265207468616e206f776e65727300000060448201526064016105e3565b60018160ff161015610c935760405162461bcd60e51b815260206004820152601260248201527130ba103632b0b9ba1037b7329037bbb732b960711b60448201526064016105e3565b6002805460ff191660ff83169081179091556040519081527fa1a39f4ff110596455f47a4a25db50c3662a86ffdb67875e4291c2efde959f1d9060200160405180910390a150565b610ce36117ad565b6001600160a01b03821615801590610d0457506001600160a01b0382163014155b8015610d1a57506001600160a01b038216600114155b610d625760405162461bcd60e51b81526020600482015260196024820152786e6f7420616c6c6f776564206f776e6572206164647265737360381b60448201526064016105e3565b6001600160a01b038281166000908152602081905260409020541615610d9a5760405162461bcd60e51b81526004016105e390611faa565b600060208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d80546001600160a01b03858116808552604085208054929093166001600160a01b03199283161790925560018085528354909116909117909155805491610e0883612081565b90915550506040516001600160a01b03831681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a160025460ff828116911614610e6157610e6181610bed565b5050565b60006001600160a01b0382166001148015906105475750506001600160a01b0390811660009081526020819052604090205416151590565b610ea56117ad565b6001600160a01b03811615801590610ec657506001600160a01b0381163014155b8015610edc57506001600160a01b038116600114155b610f285760405162461bcd60e51b815260206004820152601960248201527f696e76616c6964206e6577206f776e657220616464726573730000000000000060448201526064016105e3565b6001600160a01b038181166000908152602081905260409020541615610f605760405162461bcd60e51b81526004016105e390611faa565b6001600160a01b03821615801590610f8257506001600160a01b038216600114155b610fce5760405162461bcd60e51b815260206004820152601960248201527f696e76616c6964206f6c64206f776e657220616464726573730000000000000060448201526064016105e3565b6001600160a01b0383811660009081526020819052604090205481169083161461103a5760405162461bcd60e51b815260206004820152601e60248201527f6e6f7420636f72726573706f6e6420746f20746865206f6c644f776e6572000060448201526064016105e3565b6001600160a01b03828116600081815260208181526040808320805487871680865283862080549289166001600160a01b0319938416179055968a1685528285208054821690971790965592849052825490941690915591519081527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf910160405180910390a16040516001600160a01b03821681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a1505050565b60003361110e81610e65565b61112a5760405162461bcd60e51b81526004016105e390611f73565b60008381526004602090815260408083203380855292529091205484919060ff166111975760405162461bcd60e51b815260206004820152601f60248201527f6e6f74206265656e20617070726f7665642062792074686973206f776e65720060448201526064016105e3565b600085815260036020819052604090912001548590610100900460ff16156111fb5760405162461bcd60e51b81526020600482015260176024820152761d1c985b9cd858dd1a5bdb881a5cc8195e1958dd5d1959604a1b60448201526064016105e3565b611204866106bc565b1561135d576000868152600360205260409020805460018201546002830180546112d99360ff8116936101009091046001600160a01b031692909161124890612046565b80601f016020809104026020016040519081016040528092919081815260200182805461127490612046565b80156112c15780601f10611296576101008083540402835291602001916112c1565b820191906000526020600020905b8154815290600101906020018083116112a457829003601f168201915b50505050506109c45a6112d49190612012565b6117f3565b955085156113225760038101805461ff00191661010017905560405187907f15ed165a284872ea7017f03df402a0cadfbfab588320ffaf83f160c2f82781c790600090a261135b565b60038101805461ff001916905560405187907f492fd70ea712c765647b1676dbd9ea071e027174bc0cbbdb721f33658880271e90600090a25b505b50505050919050565b60025460ff16156113b95760405162461bcd60e51b815260206004820152601760248201527f63616e206f6e6c792062652063616c6c6564206f6e636500000000000000000060448201526064016105e3565b81518160ff16111561140d5760405162461bcd60e51b815260206004820152601d60248201527f7468726573686f6c64206973206d6f7265207468616e206f776e65727300000060448201526064016105e3565b60018160ff1610156114565760405162461bcd60e51b815260206004820152601260248201527130ba103632b0b9ba1037b7329037bbb732b960711b60448201526064016105e3565b600160005b83518110156115b157600084828151811061148657634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006001600160a01b0316816001600160a01b0316141580156114bc57506001600160a01b0381163014155b80156114da5750826001600160a01b0316816001600160a01b031614155b80156114f057506001600160a01b038116600114155b6115385760405162461bcd60e51b81526020600482015260196024820152786e6f7420616c6c6f776564206f776e6572206164647265737360381b60448201526064016105e3565b6001600160a01b0381811660009081526020819052604090205416156115705760405162461bcd60e51b81526004016105e390611faa565b6001600160a01b03928316600090815260208190526040902080546001600160a01b03191693821693909317909255806115a981612081565b91505061145b565b506001600160a01b03166000908152602081905260409020805460016001600160a01b0319909116811790915591519091556002805460ff191660ff909216919091179055565b6000836001600160a01b0381166116515760405162461bcd60e51b815260206004820152601c60248201527f746869732061646472657373206973207a65726f20616464726573730000000060448201526064016105e3565b60056000815461166090612081565b91905081905591506040518060c0016040528087600181111561169357634e487b7160e01b600052602160045260246000fd5b81526001600160a01b03871660208083019190915260408083018890526060830187905260006080840181905260a09093018390528583526003909152902081518154829060ff1916600183818111156116fd57634e487b7160e01b600052602160045260246000fd5b021790555060208281015182546001600160a01b0390911661010002610100600160a81b0319909116178255604083015160018301556060830151805161174a9260028501920190611846565b5060808201516003909101805460a09093015115156101000261ffff1990931660ff9092169190911791909117905560405182907fd0b5d9eac097410294ec9f2cee7cd185cf31ab46babf3dfdbeac8b222b03f2d190600090a250949350505050565b3330146117f15760405162461bcd60e51b81526020600482015260126024820152711c995c5d5a5c9959081cd95b198818d85b1b60721b60448201526064016105e3565b565b60008086600181111561181657634e487b7160e01b600052602160045260246000fd5b141561183057600080845160208601878987f19050610556565b6000808451602086018886f49695505050505050565b82805461185290612046565b90600052602060002090601f01602090048101928261187457600085556118ba565b82601f1061188d57805160ff19168380011785556118ba565b828001600101855582156118ba579182015b828111156118ba57825182559160200191906001019061189f565b506118c69291506118ca565b5090565b5b808211156118c657600081556001016118cb565b80356001600160a01b03811681146118f657600080fd5b919050565b60008083601f84011261190c578182fd5b50813567ffffffffffffffff811115611923578182fd5b6020830191508360208260051b850101111561193e57600080fd5b9250929050565b803580151581146118f657600080fd5b60008083601f840112611966578182fd5b50813567ffffffffffffffff81111561197d578182fd5b60208301915083602082850101111561193e57600080fd5b803560ff811681146118f657600080fd5b6000602082840312156119b7578081fd5b6119c0826118df565b9392505050565b6000806000606084860312156119db578182fd5b6119e4846118df565b92506119f2602085016118df565b9150611a00604085016118df565b90509250925092565b60008060008060008060008060c0898b031215611a24578384fd5b611a2d896118df565b9750611a3b60208a016118df565b9650611a4960408a016118df565b955060608901359450608089013567ffffffffffffffff80821115611a6c578586fd5b611a788c838d01611955565b909650945060a08b0135915080821115611a90578384fd5b50611a9d8b828c01611955565b999c989b5096995094979396929594505050565b60008060008060008060008060a0898b031215611acc578384fd5b611ad5896118df565b9750611ae360208a016118df565b9650604089013567ffffffffffffffff80821115611aff578586fd5b611b0b8c838d016118fb565b909850965060608b0135915080821115611b23578586fd5b611b2f8c838d016118fb565b909650945060808b0135915080821115611a90578384fd5b600080600080600060808688031215611b5e578081fd5b611b67866118df565b9450611b75602087016118df565b935060408601359250606086013567ffffffffffffffff811115611b97578182fd5b611ba388828901611955565b969995985093965092949392505050565b60008060008060008060a08789031215611bcc578182fd5b611bd5876118df565b9550611be3602088016118df565b94506040870135935060608701359250608087013567ffffffffffffffff811115611c0c578283fd5b611c1889828a01611955565b979a9699509497509295939492505050565b60008060408385031215611c3c578182fd5b611c45836118df565b9150611c5360208401611995565b90509250929050565b60008060408385031215611c6e578182fd5b823567ffffffffffffffff80821115611c85578384fd5b818501915085601f830112611c98578384fd5b8135602082821115611cac57611cac6120d2565b8160051b9250611cbd818401611fe1565b8281528181019085830185870184018b1015611cd7578889fd5b8896505b84871015611d0057611cec816118df565b835260019690960195918301918301611cdb565b509650611d109050878201611995565b9450505050509250929050565b60008060408385031215611d2f578182fd5b611d3883611945565b9150611c5360208401611945565b600060208284031215611d57578081fd5b81356001600160e01b0319811681146119c0578182fd5b60008060008060808587031215611d83578182fd5b843560028110611d91578283fd5b93506020611da08682016118df565b935060408601359250606086013567ffffffffffffffff80821115611dc3578384fd5b818801915088601f830112611dd6578384fd5b813581811115611de857611de86120d2565b611dfa601f8201601f19168501611fe1565b91508082528984828501011115611e0f578485fd5b8084840185840137810190920192909252939692955090935050565b600060208284031215611e3c578081fd5b5035919050565b60008060408385031215611e55578182fd5b82359150611c53602084016118df565b600060208284031215611e76578081fd5b6119c082611995565b6020808252825182820181905260009190848201906040850190845b81811015611ec05783516001600160a01b031683529284019291840191600101611e9b565b50909695505050505050565b600060028810611eea57634e487b7160e01b81526021600452602481fd5b878252602060018060a01b0388168184015286604084015260c0606084015285518060c0850152825b81811015611f2f5787810183015185820160e001528201611f13565b81811115611f40578360e083870101525b50601f01601f1916830160e0019150611f609050608083018560ff169052565b82151560a0830152979650505050505050565b60208082526018908201527f6973206e6f74206f6e65206f6620746865206f776e6572730000000000000000604082015260600190565b60208082526017908201527f6475706c6963617465206f776e65722061646472657373000000000000000000604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561200a5761200a6120d2565b604052919050565b600082821015612024576120246120bc565b500390565b600060ff82168061203c5761203c6120bc565b6000190192915050565b600181811c9082168061205a57607f821691505b6020821081141561207b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612095576120956120bc565b5060010190565b600060ff821660ff8114156120b3576120b36120bc565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122011a4e7f360d5c5573340e56bd28ae38d45a4d0b3e4399baa321463a224b87d7764736f6c63430008040033608060405234801561001057600080fd5b5060405161050a38038061050a83398101604081905261002f91610148565b61003833610047565b61004181610097565b50610176565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6100aa8161014260201b61020a1760201c565b6101205760405162461bcd60e51b815260206004820152603360248201527f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60448201527f6e206973206e6f74206120636f6e747261637400000000000000000000000000606482015260840160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b3b151590565b600060208284031215610159578081fd5b81516001600160a01b038116811461016f578182fd5b9392505050565b610385806101856000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633659cfe61461005c5780635c60da1b14610071578063715018a61461009a5780638da5cb5b146100a2578063f2fde38b146100b3575b600080fd5b61006f61006a3660046102ec565b6100c6565b005b6001546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b61006f610139565b6000546001600160a01b031661007e565b61006f6100c13660046102ec565b61016f565b6000546001600160a01b031633146100f95760405162461bcd60e51b81526004016100f09061031a565b60405180910390fd5b61010281610210565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6000546001600160a01b031633146101635760405162461bcd60e51b81526004016100f09061031a565b61016d600061029c565b565b6000546001600160a01b031633146101995760405162461bcd60e51b81526004016100f09061031a565b6001600160a01b0381166101fe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100f0565b6102078161029c565b50565b3b151590565b803b61027a5760405162461bcd60e51b815260206004820152603360248201527f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f6044820152721b881a5cc81b9bdd08184818dbdb9d1c9858dd606a1b60648201526084016100f0565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156102fd578081fd5b81356001600160a01b0381168114610313578182fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea2646970667358221220d17d669c05a71cac6423203ce4ae8e5487006a072696fd6ab4fc9340677ee7b164736f6c63430008040033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000465760003560e01c80631733ff9e146200004b57806341e4c5d0146200007e5780637ad71f721462000095575b600080fd5b620000626200005c3660046200037c565b620000ac565b6040516001600160a01b03909116815260200160405180910390f35b620000626200008f36600462000293565b6200019e565b62000062620000a6366004620003ee565b6200022b565b6000807f00000000000000000000000000000000000000000000000000000000000000008484604051620000e09062000256565b620000ee9392919062000407565b604051809103906000f0801580156200010b573d6000803e3d6000fd5b50600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0383169081179091556040805133815260208101929092529193508392507f5b03bfed1c14a02bdeceb5fa582eb1a5765fc0bc64ca0e6af4c20afc9487f081910160405180910390a15092915050565b6000807f0000000000000000000000000000000000000000000000000000000000000000632bbdea4e60e01b8585604051602401620001df929190620004ad565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516200021e9062000256565b620000ee92919062000447565b600081815481106200023c57600080fd5b6000918252602090912001546001600160a01b0316905081565b610982806200051d83390190565b80356001600160a01b03811681146200027c57600080fd5b919050565b803560ff811681146200027c57600080fd5b60008060408385031215620002a6578182fd5b823567ffffffffffffffff80821115620002be578384fd5b818501915085601f830112620002d2578384fd5b8135602082821115620002e957620002e962000506565b8160051b604051601f19603f8301168101818110868211171562000311576200031162000506565b604052838152828101945085830182870184018b101562000330578889fd5b8896505b848710156200035d57620003488162000264565b86526001969096019594830194830162000334565b5096506200036f905087820162000281565b9450505050509250929050565b600080602083850312156200038f578182fd5b823567ffffffffffffffff80821115620003a7578384fd5b818501915085601f830112620003bb578384fd5b813581811115620003ca578485fd5b866020828501011115620003dc578485fd5b60209290920196919550909350505050565b60006020828403121562000400578081fd5b5035919050565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b60018060a01b0383168152600060206040818401528351806040850152825b81811015620004845785810183015185820160600152820162000466565b81811115620004965783606083870101525b50601f01601f191692909201606001949350505050565b604080825283519082018190526000906020906060840190828701845b82811015620004f15781516001600160a01b031684529284019290840190600101620004ca565b50505060ff9490941692019190915250919050565b634e487b7160e01b600052604160045260246000fdfe60806040526040516109823803806109828339810160408190526100229161047d565b61004d60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d51610588565b60008051602061093b8339815191521461007757634e487b7160e01b600052600160045260246000fd5b6100838282600061008a565b50506105ed565b61009383610164565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a26000825111806100d45750805b1561015f5761015d836001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561011557600080fd5b505afa158015610129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014d9190610463565b8361030460201b6100291760201c565b505b505050565b6101778161033060201b6100551760201c565b6101d65760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b610259816001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561021257600080fd5b505afa158015610226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024a9190610463565b61033060201b6100551760201c565b6102be5760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b60648201526084016101cd565b806102e360008051602061093b83398151915260001b61033660201b61005b1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060610329838360405180606001604052806027815260200161095b60279139610339565b9392505050565b3b151590565b90565b6060833b6103985760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016101cd565b600080856001600160a01b0316856040516103b39190610539565b600060405180830381855af49150503d80600081146103ee576040519150601f19603f3d011682016040523d82523d6000602084013e6103f3565b606091505b50909250905061040482828661040e565b9695505050505050565b6060831561041d575081610329565b82511561042d5782518084602001fd5b8160405162461bcd60e51b81526004016101cd9190610555565b80516001600160a01b038116811461045e57600080fd5b919050565b600060208284031215610474578081fd5b61032982610447565b6000806040838503121561048f578081fd5b61049883610447565b60208401519092506001600160401b03808211156104b4578283fd5b818501915085601f8301126104c7578283fd5b8151818111156104d9576104d96105d7565b604051601f8201601f19908116603f01168101908382118183101715610501576105016105d7565b81604052828152886020848701011115610519578586fd5b61052a8360208301602088016105ab565b80955050505050509250929050565b6000825161054b8184602087016105ab565b9190910192915050565b60208152600082518060208401526105748160408501602087016105ab565b601f01601f19169190910160400192915050565b6000828210156105a657634e487b7160e01b81526011600452602481fd5b500390565b60005b838110156105c65781810151838201526020016105ae565b8381111561015d5750506000910152565b634e487b7160e01b600052604160045260246000fd5b61033f806105fc6000396000f3fe60806040523661001357610011610017565b005b6100115b61002761002261005e565b610106565b565b606061004e83836040518060600160405280602781526020016102e36027913961012a565b9392505050565b3b151590565b90565b60006100917fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156100c957600080fd5b505afa1580156100dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610101919061023c565b905090565b3660008037600080366000845af43d6000803e808015610125573d6000f35b3d6000fd5b6060833b61018e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516101a99190610263565b600060405180830381855af49150503d80600081146101e4576040519150601f19603f3d011682016040523d82523d6000602084013e6101e9565b606091505b50915091506101f9828286610203565b9695505050505050565b6060831561021257508161004e565b8251156102225782518084602001fd5b8160405162461bcd60e51b8152600401610185919061027f565b60006020828403121561024d578081fd5b81516001600160a01b038116811461004e578182fd5b600082516102758184602087016102b2565b9190910192915050565b602081526000825180602084015261029e8160408501602087016102b2565b601f01601f19169190910160400192915050565b60005b838110156102cd5781810151838201526020016102b5565b838111156102dc576000848401525b5050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202a47b2fa8138f3011ece0a45caf5d4132ab559a50271fc13b16a67066df819fc64736f6c63430008040033a3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d9f9d4d576d5e4ae8780e8f37c3a455d2e1608615c0e32e2bf8ba0bce7dbb0cd64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createWallet(address[],uint8)": {
        "details": "Allows verified creation of multisignature wallet.",
        "params": {
          "_owners": "List of initial owners.",
          "_required": "Number of required confirmations."
        },
        "returns": {
          "wallet": "Returns wallet address."
        }
      },
      "createWallet(bytes)": {
        "details": "Allows verified creation of multisignature wallet.",
        "params": {
          "data": "data payload for initialize a wallet."
        },
        "returns": {
          "wallet": "Returns wallet address."
        }
      }
    },
    "title": "Multi signature wallet factory - Allows creation of multisig wallet.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1722,
        "contract": "contracts/MultiSigWalletFactory.sol:MultiSigWalletFactory",
        "label": "wallets",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      }
    }
  }
}