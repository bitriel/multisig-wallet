{
  "language": "Solidity",
  "sources": {
    "contracts/base/Executor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"../utils/Types.sol\";\n\nabstract contract Executor {\n  function execute(\n    Types.Operation operation,\n    address target,\n    uint256 value,\n    bytes memory data,\n    uint256 txGas\n  ) internal returns (bool success) {\n    if(operation == Types.Operation.Call) {\n      // solhint-disable-next-line no-inline-assembly\n      assembly {\n        success := call(txGas, target, value, add(data, 0x20), mload(data), 0, 0)\n      }\n    } else {\n      // solhint-disable-next-line no-inline-assembly\n      assembly {\n        success :=delegatecall(txGas, target, add(data, 0x20), mload(data), 0, 0)\n      }\n    }\n  }\n}"
    },
    "contracts/utils/Types.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\n\ncontract Types {\n  enum Operation {Call, DelegateCall}\n}"
    },
    "contracts/utils/SimulateTx.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\nimport \"./Types.sol\";\nimport \"../base/Executor.sol\";\n\ncontract SimulateTx is Executor {\n  function simulate(\n    Types.Operation operation,\n    address to, \n    uint256 value,\n    bytes memory data\n  ) external returns(\n    bool success,\n    uint256 gasEstimated,\n    bytes memory returnData\n  ) {\n    uint256 startGas = gasleft();\n    success = execute(operation, to, value, data, gasleft());\n    gasEstimated = startGas - gasleft();\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      let ptr := mload(0x40)\n      mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\n      mstore(ptr, returndatasize())\n      returndatacopy(add(ptr, 0x20), 0, returndatasize())\n      returnData := ptr\n    }\n  }\n}"
    },
    "contracts/MultiSigWallet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"./utils/Types.sol\";\nimport \"./base/OwnerManager.sol\";\nimport \"./base/Executor.sol\";\nimport \"./handler/TokensHandler.sol\";\n\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\ncontract MultiSigWallet is OwnerManager, Executor, TokensHandler, Initializable {\n  event Received(address indexed sender, uint256 value);\n  event TransactionApproved(address indexed sender, uint256 indexed transactionId);\n  event ApprovalRevoked(address indexed sender, uint256 indexed transactionId);\n  event TransactionSubmitted(uint256 indexed transactionId);\n  event TransactionExecuted(uint256 indexed transactionId);\n  event ExecutionFailed(uint256 indexed transactionId);\n\n  struct Transaction {\n    Types.Operation operation;\n    address target;\n    uint256 value;\n    bytes data;\n    uint8 approval;\n    bool executed;\n  }\n\n  uint8 constant public MAX_OWNER = 50;\n\n  mapping (uint256 => Transaction) public transactions;\n  mapping (uint256 => mapping (address => bool)) public approvals;\n  uint256 public transactionCount;\n\n  /// @dev sets initial owners and required number of confirmations.\n  /// @param _owners List of initial owners.\n  /// @param _required Number of required confirmations.\n  function initialize(address[] memory _owners, uint8 _required) public initializer {\n    setupOwners(_owners, _required);\n  }\n\n  /// @dev deposit native token into this contract.\n  receive() external payable {\n    emit Received(msg.sender, msg.value);\n  }\n\n  /// @dev Allows an owner to submit and approve a transaction.\n  /// @param operation external call operation\n  /// @param target transaction destination address\n  /// @param value transaction value in Wei.\n  /// @param data transaction data payload.\n  /// @return txnId returns transaction ID.\n  function submitTransaction(\n    Types.Operation operation, \n    address target, \n    uint256 value, \n    bytes memory data\n  ) public returns (uint256 txnId) \n  {\n    txnId = _addTransaction(operation, target, value, data);\n    approve(txnId);\n  }\n\n  /// @dev Allows an owner to approve a transaction.\n  /// @param _txnId transaction ID.\n  function approve(uint256 _txnId) public\n    isOwner(msg.sender)\n    hasTransaction(_txnId)\n    notApproved(_txnId, msg.sender)\n  {\n    transactions[_txnId].approval++;\n    approvals[_txnId][msg.sender] = true;\n\n    emit TransactionApproved(msg.sender, _txnId);\n    executeTransaction(_txnId);\n  }\n\n  /// @dev Allows an owner to revoke a approval for a transaction.\n  /// @param _txnId transaction ID.\n  function revokeApproval(uint256 _txnId) external\n    isOwner(msg.sender)\n    approved(_txnId, msg.sender)\n    notExecuted(_txnId)\n  {\n    transactions[_txnId].approval--;\n    approvals[_txnId][msg.sender] = false;\n    \n    emit ApprovalRevoked(msg.sender, _txnId);\n  }\n\n  /// @dev Allows anyone to execute a approved transaction.\n  /// @param _txnId transaction ID.\n  /// @return success wether it's success\n  function executeTransaction(uint256 _txnId) public\n    isOwner(msg.sender)\n    approved(_txnId, msg.sender)\n    notExecuted(_txnId)\n    returns (bool success)\n  {\n    if (isConfirmed(_txnId)) {\n      Transaction storage txn = transactions[_txnId];\n      success = execute(txn.operation, txn.target, txn.value, txn.data, (gasleft() - 2500));\n      if (success) {\n        txn.executed = true;\n        emit TransactionExecuted(_txnId);\n      } else {\n        txn.executed = false;\n        emit ExecutionFailed(_txnId);\n      }\n    }\n  }\n\n  /// @dev Returns the confirmation status of a transaction.\n  /// @param _txnId transaction ID.\n  /// @return status confirmation status.\n  function isConfirmed(uint _txnId) public view returns (bool status) {\n    status = transactions[_txnId].approval >= getThreshold();\n  }\n\n  /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n  /// @param operation external call operation\n  /// @param target transaction destination address\n  /// @param value transaction value in Wei.\n  /// @param data transaction data payload.\n  /// @return txnId returns transaction ID.\n  function _addTransaction(\n    Types.Operation operation, \n    address target, \n    uint256 value, \n    bytes memory data\n  ) internal\n    isValid(target)\n    returns (uint txnId)\n  {\n    txnId = ++transactionCount;\n    transactions[txnId] = Transaction({\n      operation: operation,\n      target: target,\n      value: value,\n      data: data,\n      approval: 0,\n      executed: false\n    });\n    \n    emit TransactionSubmitted(txnId);\n  }\n\n  /// @dev Returns number of approvals of a transaction.\n  /// @param _txnId transaction ID.\n  /// @return count Number of approvals.\n  function getApprovalCount(uint _txnId) external view returns (uint8 count) {\n    count = transactions[_txnId].approval;\n  }\n\n  /// @dev Returns total number of transactions which filers are applied.\n  /// @param _pending Include pending transactions.\n  /// @param _executed Include executed transactions.\n  /// @return count Total number of transactions after filters are applied.\n  function getTransactionCount(bool _pending, bool _executed) external view returns (uint256 count)\n  {\n    for (uint256 i=0; i<transactionCount; i++)\n      if (_pending && !transactions[i].executed || _executed && transactions[i].executed)\n        count++;\n  }\n\n  modifier hasTransaction(uint256 _txnId) {\n    require(_txnId < transactionCount, \"transaction is not exist\");\n    _;\n  }\n\n  modifier approved(uint256 _txnId, address _owner) {\n    require(approvals[_txnId][_owner], \"not been approved by this owner\");\n    _;\n  }\n\n  modifier notApproved(uint256 _txnId, address _owner) {\n    require(!approvals[_txnId][_owner], \"has been approved by this owner\");\n    _;\n  }\n\n  modifier notExecuted(uint256 _txnId) {\n    require(!transactions[_txnId].executed, \"transaction is executed\");\n    _;\n  }\n\n  modifier isValid(address _address) {\n    require(_address != address(0), \"this address is zero address\");\n    _;\n  }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !Address.isContract(address(this));\n    }\n}\n"
    },
    "contracts/base/OwnerManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\nimport \"../utils/SelfAuthorized.sol\";\n\nabstract contract OwnerManager is SelfAuthorized {\n  event AddedOwner(address owner);\n  event RemovedOwner(address owner);\n  event ChangedThreshold(uint8 threshold);\n\n  address internal constant SENTINEL_OWNERS = address(0x1);\n  mapping(address => address) internal owners;\n  uint256 internal ownerCount;\n  uint8 internal threshold;\n\n  function setupOwners(address[] memory _owners, uint8 _threshold) internal {\n    require(threshold == 0, \"can only be called once\");\n    require(_threshold <= _owners.length, \"threshold is more than owners\");\n    require(_threshold >= 1, \"at least one owner\");\n    address currentOwner = SENTINEL_OWNERS;\n    for(uint i=0; i<_owners.length; i++) {\n      address owner = _owners[i];\n      require(owner != address(0) && owner != address(this) && owner != currentOwner && owner != SENTINEL_OWNERS, \"not allowed owner address\");\n      require(owners[owner] == address(0), \"duplicate owner address\");\n      owners[currentOwner] = owner;\n      currentOwner = owner;\n    }\n    owners[currentOwner] = SENTINEL_OWNERS;\n    ownerCount = _owners.length;\n    threshold = _threshold;\n  } \n\n  function addOwnerWithThreshold(address owner, uint8 _threshold) public authorized {\n    require(owner != address(0) && owner != address(this) && owner != SENTINEL_OWNERS, \"not allowed owner address\");\n    require(owners[owner] == address(0), \"duplicate owner address\");\n    owners[owner] = owners[SENTINEL_OWNERS];\n    owners[SENTINEL_OWNERS] = owner;\n    ownerCount++;\n    emit AddedOwner(owner);\n\n    if(threshold != _threshold) changeThreshold(_threshold);\n  }\n\n  function removeOwnerWithThreshold(address prevOwner, address owner, uint8 _threshold) internal authorized {\n    require(ownerCount - 1 >= _threshold, \"threshold can not be reached\");\n    require(owner != address(0) && owner != SENTINEL_OWNERS, \"invalid owner address\");\n    require(owners[prevOwner] == owner, \"not correspond to the owner\");\n    owners[prevOwner] = owners[owner];\n    owners[owner] = address(0);\n    ownerCount--;\n    emit RemovedOwner(owner);\n\n    if(threshold != _threshold) changeThreshold(_threshold);\n  }\n\n  function swapOwner(address prevOwner, address oldOwner, address newOwner) public authorized {\n    require(newOwner != address(0) && newOwner != address(this) && newOwner != SENTINEL_OWNERS, \"invalid new owner address\");\n    require(owners[newOwner] == address(0), \"duplicate owner address\");\n    require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, \"invalid old owner address\");\n    require(owners[prevOwner] == oldOwner, \"not correspond to the oldOwner\");\n    owners[newOwner] = owners[oldOwner];\n    owners[prevOwner] = newOwner;\n    owners[oldOwner] = address(0);\n    emit RemovedOwner(oldOwner);\n    emit AddedOwner(newOwner);\n  }\n\n  function changeThreshold(uint8 _threshold) public authorized {\n    require(_threshold <= ownerCount, \"threshold is more than owners\");\n    require(_threshold >= 1, \"at least one owner\");\n    threshold = _threshold;\n    emit ChangedThreshold(_threshold);\n  }\n\n  function getThreshold() public view returns (uint8) {\n    return threshold;\n  }\n\n  function checkOwner(address owner) public view returns (bool) {\n    return owner != SENTINEL_OWNERS && owners[owner] != address(0);\n  }\n\n  function getOwners() public view returns (address[] memory) {\n    address[] memory _owners = new address[](ownerCount);\n\n    address currentOwner = owners[SENTINEL_OWNERS];\n    for(uint i=0; i<ownerCount; i++) {\n      _owners[i] = currentOwner;\n      currentOwner = owners[currentOwner];\n    }\n    return _owners;\n  }\n\n  modifier notOwner(address _owner) {\n    require(!checkOwner(_owner), \"is one of the owners\");\n    _;\n  }\n\n  modifier isOwner(address _owner) {\n    require(checkOwner(_owner), \"is not one of the owners\");\n    _;\n  }\n}"
    },
    "contracts/handler/TokensHandler.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\";\n\nabstract contract TokensHandler is IERC165, IERC1155Receiver, IERC721Receiver, IERC777Recipient {\n  function onERC1155Received(\n    address,\n    address,\n    uint256,\n    uint256,\n    bytes calldata\n  ) external pure override returns (bytes4) {\n    return 0xf23a6e61;\n  }\n\n  function onERC1155BatchReceived(\n    address,\n    address,\n    uint256[] calldata,\n    uint256[] calldata,\n    bytes calldata\n  ) external pure override returns (bytes4) {\n    return 0xbc197c81;\n  }\n\n  function onERC721Received(\n    address,\n    address,\n    uint256,\n    bytes calldata\n  ) external pure override returns (bytes4) {\n    return 0x150b7a02;\n  }\n\n  // solhint-disable no-empty-blocks\n  function tokensReceived(\n    address,\n    address,\n    address,\n    uint256,\n    bytes calldata,\n    bytes calldata\n  ) external pure override {\n    // We implement this for completeness, doesn't really have any value\n  }\n\n  function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\n    return\n      interfaceId == type(IERC1155Receiver).interfaceId ||\n      interfaceId == type(IERC721Receiver).interfaceId ||\n      interfaceId == type(IERC165).interfaceId;\n  }\n}"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/utils/SelfAuthorized.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\n\nabstract contract SelfAuthorized {\n  function _selfCall() private view {\n    require(msg.sender == address(this), \"required self call\");\n  }\n\n  modifier authorized() {\n    _selfCall();\n    _;\n  }\n}"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Recipient.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\n *\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\n * contract implement this interface (contract holders can be their own\n * implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Recipient {\n    /**\n     * @dev Called by an {IERC777} token contract whenever tokens are being\n     * moved or created into a registered account (`to`). The type of operation\n     * is conveyed by `from` being the zero address or not.\n     *\n     * This call occurs _after_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/MultiSigWalletFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport \"./MultiSigWallet.sol\";\n\n/// @title Multi signature wallet factory - Allows creation of multisig wallet.\ncontract MultiSigWalletFactory {\n    event WalletCreated(address creator, address wallet);\n\n    address immutable private multisigWalletBeacon;\n    address[] public wallets;\n\n    constructor(address upgrader) {\n        UpgradeableBeacon _multisigWalletBeacon = new UpgradeableBeacon(address(new MultiSigWallet()));\n        _multisigWalletBeacon.transferOwnership(upgrader);\n        multisigWalletBeacon = address(_multisigWalletBeacon);\n    }\n\n    /// @dev Allows verified creation of multisignature wallet.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    /// @return wallet Returns wallet address.\n    function createWallet(address[] memory _owners, uint8 _required) external returns (address wallet) {\n        BeaconProxy proxy = new BeaconProxy(\n            multisigWalletBeacon,\n            abi.encodeWithSelector(MultiSigWallet.initialize.selector, _owners, _required)\n        );\n        wallet = address(proxy);\n        wallets.push(wallet);\n        emit WalletCreated(msg.sender, wallet);\n    }\n\n    /// @dev Allows verified creation of multisignature wallet.\n    /// @param data data payload for initialize a wallet.\n    /// @return wallet Returns wallet address.\n    function createWallet(bytes calldata data) external returns (address wallet) {\n        BeaconProxy proxy = new BeaconProxy(\n            multisigWalletBeacon,\n            data\n        );\n        wallet = address(proxy);\n        wallets.push(address(proxy));\n        emit WalletCreated(msg.sender, address(proxy));\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/handler/FallbackHandler.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"./TokensHandler.sol\";\nimport \"../interfaces/ISignatureValidator.sol\";\nimport \"../MultiSigWalletV2.sol\";\n\ncontract FallbackHandler is TokensHandler, ISignatureValidator {\n  //keccak256(\n  //    \"SafeMessage(bytes message)\"\n  //);\n  bytes32 private constant SAFE_MSG_TYPEHASH = 0x60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca;\n\n  bytes4 internal constant SIMULATE_SELECTOR = bytes4(keccak256(\"simulate(address,bytes)\"));\n\n  address internal constant SENTINEL_MODULES = address(0x1);\n  bytes4 internal constant UPDATED_MAGIC_VALUE = 0x1626ba7e;\n\n  function isValidSignature(bytes calldata _data, bytes calldata _signature) public view override returns (bytes4) {\n    MultiSigWalletV2 wallet = MultiSigWalletV2(payable(msg.sender));\n    bytes32 messageHash = _getMessageHash(wallet, _data);\n    if (_signature.length == 0) {\n      require(wallet.signedMessages(messageHash) != 0, \"Hash not approved\");\n    } else {\n      wallet.checkSignatures(messageHash, _data, _signature);\n    }\n    return EIP1271_MAGIC_VALUE;\n  }\n\n  function getMessageHash(bytes memory message) public view returns (bytes32) {\n    return _getMessageHash(MultiSigWalletV2(payable(msg.sender)), message);\n  }\n\n  function _getMessageHash(MultiSigWalletV2 wallet, bytes memory message) public view returns (bytes32) {\n    bytes32 messageHash = keccak256(abi.encode(SAFE_MSG_TYPEHASH, keccak256(message)));\n    return keccak256(abi.encodePacked(bytes1(0x19), bytes1(0x01), wallet.domainSeparator(), messageHash));\n  }\n\n  function isValidSignature(bytes32 _dataHash, bytes calldata _signature) external view returns (bytes4) {\n    ISignatureValidator validator = ISignatureValidator(msg.sender);\n    bytes4 value = validator.isValidSignature(abi.encode(_dataHash), _signature);\n    return (value == EIP1271_MAGIC_VALUE) ? UPDATED_MAGIC_VALUE : bytes4(0);\n  }\n}"
    },
    "contracts/interfaces/ISignatureValidator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\n\ncontract ISignatureValidatorConstants {\n  // bytes4(keccak256(\"isValidSignature(bytes,bytes)\")\n  bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;\n}\n\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\n  function isValidSignature(bytes memory _data, bytes memory _signature) external view virtual returns (bytes4);\n}"
    },
    "contracts/MultiSigWalletV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\n\n// import \"@openzeppelin/contracts-upgradeable/proxy/UUPSUpgradeable.sol\";\n// import \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./libraries/FullMath.sol\";\nimport \"./interfaces/ISignatureValidator.sol\";\nimport \"./utils/Types.sol\";\nimport \"./utils/SignatureDecoder.sol\";\nimport \"./base/OwnerManager.sol\";\nimport \"./base/ModuleManager.sol\";\nimport \"./base/FallbackManager.sol\";\nimport \"./base/GuardManager.sol\";\n\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\ncontract MultiSigWalletV2 is \n  // Initializable,\n  // OwnableUpgradeable,\n  // UUPSUpgradeable,\n  OwnerManager, \n  ModuleManager, \n  FallbackManager, \n  GuardManager,\n  SignatureDecoder,\n  ISignatureValidatorConstants\n{\n  using FullMath for uint256;\n\n  string public constant VERSION = \"0.4.0\";\n\n  // keccak256(\n  //     \"EIP712Domain(uint256 chainId,address verifyingContract)\"\n  // );\n  bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\n\n  // keccak256(\n  //     \"SafeTx(uint8 operation,address to,uint256 value,bytes data,uint256 txGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 nonce)\"\n  // );\n  bytes32 private constant SAFE_TX_TYPEHASH = 0x83d2ee3bbf5c35a5a8a0fb99a9df8b955b61832c5fa64df35730090baf04763e;\n\n  event Setup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\n  event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\n  event SignMsg(bytes32 indexed msgHash);\n  event ExecutionFailure(bytes32 txHash, uint256 payment);\n  event ExecutionSuccess(bytes32 txHash, uint256 payment);\n  event Received(address indexed sender, uint256 value);\n\n  uint256 public nonce;\n  mapping(bytes32 => uint256) public signedMessages;\n  mapping(address => mapping(bytes32 => uint256)) public approvedHashes;\n\n  /// @dev Fallback function accepts Ether transactions.\n  receive() external payable {\n    emit Received(msg.sender, msg.value);\n  }\n\n  function setup(\n    address[] calldata _owners,\n    uint8 _threshold,\n    address to,\n    bytes calldata data,\n    address fallbackHandler,\n    address paymentToken,\n    uint256 payment,\n    address payable paymentReceiver\n  ) public \n  // initializer \n  {\n    // __Ownable_init();\n    setupOwners(_owners, _threshold);\n    if(fallbackHandler != address(0)) _setupFallbackHandler(fallbackHandler);\n    setupModules(to, data);\n\n    if(payment > 0) {\n      handlePayment(payment, 0, 1, paymentToken, paymentReceiver);\n    }\n    emit Setup(msg.sender, _owners, _threshold, to, fallbackHandler);\n  }\n\n  // // solhint-disable-next-line no-empty-blocks\n  // function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n\n  function execTransaction(\n    Types.Operation operation,\n    address to,\n    uint256 value,\n    bytes calldata data,\n    uint256 txGas,\n    uint256 baseGas,\n    uint256 gasPrice,\n    address gasToken,\n    address payable refundReceiver,\n    bytes memory signatures\n  ) public payable virtual returns (bool success) {\n    bytes32 txHash;\n    {\n      bytes memory txHashData =\n        encodeTransactionData(\n          operation,\n          to,\n          value,\n          data,\n          txGas,\n          // Payment info\n          baseGas,\n          gasPrice,\n          gasToken,\n          refundReceiver,\n          // Signature info\n          nonce\n        );\n      nonce++;\n      txHash = keccak256(txHashData);\n      checkSignatures(txHash, txHashData, signatures);\n    }\n    address guard = getGuard(); \n    if(guard != address(0)) {\n      IGuard(guard).checkTransaction(\n        operation, \n        to, \n        value, \n        data, \n        txGas, \n        baseGas, \n        gasPrice, \n        gasToken, \n        refundReceiver, \n        signatures, \n        msg.sender\n      );\n    }\n    require(gasleft() >= ((txGas * 64) / 63).max(txGas + 2500) + 500, \"not enough gas to exec tx\");\n    {\n      uint256 gasUsed = gasleft();\n      success = execute(operation, to, value, data, gasPrice == 0 ? (gasleft() - 2500) : txGas);\n      gasUsed -= gasleft();\n      require(success || gasPrice != 0 || txGas != 0, \"not possible to estimateGas\");\n      uint256 payment = 0;\n      if(gasPrice > 0) {\n        payment = handlePayment(gasUsed, baseGas, gasPrice, gasToken, refundReceiver);\n      }\n      if(success) emit ExecutionSuccess(txHash, payment);\n      else emit ExecutionFailure(txHash, payment);\n    }\n    if(guard != address(0)) {\n      IGuard(guard).checkAfterExecution(txHash, success);\n    }\n  }\n\n  function handlePayment(\n    uint256 gasUsed,\n    uint256 baseGas,\n    uint256 gasPrice,\n    address gasToken,\n    address payable refundReceiver\n  ) private returns (uint256 payment) {\n    // solhint-disable-next-line avoid-tx-origin\n    address payable receiver = refundReceiver == address(0) ? payable(tx.origin) : refundReceiver;\n    if(gasToken == address(0)) {\n      payment = gasUsed.add(baseGas).mul(gasPrice.min(tx.gasprice));\n      require(receiver.send(payment), \"payment fail\");\n    } else {\n      payment = gasUsed.add(baseGas).mul(gasPrice);\n      require(transferToken(gasToken, refundReceiver, payment), \"payment fail\");\n    }\n  }\n\n  function checkSignatures(\n    bytes32 txHash,\n    bytes memory txHashData,\n    bytes memory signatures\n  ) public view {\n    uint8 _threshold = threshold;\n    _checkSignatures(txHash, txHashData, signatures, _threshold);\n  }\n\n\n  function _checkSignatures(\n    bytes32 txHash,\n    bytes memory txHashData,\n    bytes memory signatures,\n    uint8 _threshold\n  ) internal view {\n    require(signatures.length >= _threshold * 65, \"signatures is too short\");\n    address lastOwner = address(0);\n    address currentOwner;\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n    uint256 i;\n    for(i=0; i<_threshold; i++) {\n      (v, r, s) = signatureSplit(signatures, i);\n      if (v == 0) {\n        // If v is 0 then it is a contract signature\n        currentOwner = address(uint160(uint256(r)));\n        require(uint256(s) >= _threshold * 65, \"\");\n        require(uint256(s).add(32) <= signatures.length, \"'s' is out of bound\");\n        uint256 contractSignatureLen;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            contractSignatureLen := mload(add(add(signatures, s), 0x20))\n        }\n        require(uint256(s).add(32).add(contractSignatureLen) <= signatures.length, \"GS023\");\n\n        bytes memory contractSignature;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n          // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\n          contractSignature := add(add(signatures, s), 0x20)\n        }\n        require(ISignatureValidator(currentOwner).isValidSignature(txHashData, contractSignature) == EIP1271_MAGIC_VALUE, \"GS024\");\n      } else if (v == 1) {\n        // If v is 1 then it is an approved hash\n        currentOwner = address(uint160(uint256(r)));\n        require(msg.sender == currentOwner || approvedHashes[currentOwner][txHash] != 0, \"the message have been approved\");\n      } else if (v > 30) {\n        currentOwner = ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", txHash)), v - 4, r, s);\n      } else {\n        currentOwner = ecrecover(txHash, v, r, s);\n      }\n      require(currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS, \"GS026\");\n      lastOwner = currentOwner;\n    }\n  }\n\n  function approveHash(bytes32 txHash) external {\n    require(owners[msg.sender] != address(0), \"only one of owners can approve\");\n    approvedHashes[msg.sender][txHash] = 1;\n    emit ApproveHash(txHash, msg.sender);\n  }\n\n  function encodeTransactionData(\n    Types.Operation operation,\n    address to,\n    uint256 value,\n    bytes calldata data,\n    uint256 txGas,\n    uint256 baseGas,\n    uint256 gasPrice,\n    address gasToken,\n    address refundReceiver,\n    uint256 _nonce\n  ) public view returns (bytes memory) {\n    bytes32 txHash = keccak256(abi.encode(\n      SAFE_TX_TYPEHASH,\n      operation,\n      to,\n      value,\n      data,\n      txGas,\n      baseGas,\n      gasPrice,\n      gasToken,\n      refundReceiver,\n      _nonce\n    ));\n    return abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), txHash);\n  }\n\n  function getTransactionHash(\n    Types.Operation operation,\n    address to,\n    uint256 value,\n    bytes calldata data,\n    uint256 txGas,\n    uint256 baseGas,\n    uint256 gasPrice,\n    address gasToken,\n    address refundReceiver,\n    uint256 _nonce\n  ) public view returns (bytes32) {\n    return keccak256(encodeTransactionData(operation, to, value, data, txGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce));\n  }\n\n  function getChainId() public view returns (uint256 id) {\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      id := chainid()\n    }\n  }\n\n  function domainSeparator() public view returns (bytes32) {\n    return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, getChainId(), this));\n  }\n\n  function transferToken(\n    address token,\n    address receiver,\n    uint256 amount\n  ) internal returns (bool transferred) {\n    // 0xa9059cbb - keccack(\"transfer(address,uint256)\")\n    bytes memory data = abi.encodeWithSelector(0xa9059cbb, receiver, amount);\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      // We write the return value to scratch space.\n      // See https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory\n      let success := call(sub(gas(), 10000), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n      switch returndatasize()\n        case 0 {\n          transferred := success\n        }\n        case 0x20 {\n          transferred := iszero(or(iszero(success), iszero(mload(0))))\n        }\n        default {\n          transferred := 0\n        }\n    }\n  }\n}\n"
    },
    "contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\n\nlibrary FullMath {\n  /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n        return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, \"multiply overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a, \"subtract overflow\");\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a, \"add overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the largest of two numbers.\n    */\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  /**\n    * @dev Returns the smallest of two numbers.\n    */\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}"
    },
    "contracts/utils/SignatureDecoder.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"../libraries/FullMath.sol\";\n\nabstract contract SignatureDecoder {\n  function signatureSplit(bytes memory signatures, uint256 pos)\n    internal\n    pure\n    returns (\n      uint8 v,\n      bytes32 r,\n      bytes32 s\n    )\n  {\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      let signaturePos := mul(0x41, pos)\n      r := mload(add(signatures, add(signaturePos, 0x20)))\n      s := mload(add(signatures, add(signaturePos, 0x40)))\n      // Here we are loading the last 32 bytes, including 31 bytes\n      // of 's'. There is no 'mload8' to do this.\n      //\n      // 'byte' is not working due to the Solidity parser, so lets\n      // use the second best option, 'and'\n      v := and(mload(add(signatures, add(signaturePos, 0x41))), 0xff)\n    }\n  }\n}"
    },
    "contracts/base/ModuleManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\nimport \"../utils/SelfAuthorized.sol\";\nimport \"../utils/Types.sol\";\nimport \"./Executor.sol\";\n\ncontract ModuleManager is SelfAuthorized, Executor {\n  event EnabledModule(address module);\n  event DisabledModule(address module);\n  event ExecutionFromModuleSuccess(address indexed module);\n  event ExecutionFromModuleFailure(address indexed module);\n\n  address internal constant SENTINEL_MODULES = address(0x1);\n  mapping(address => address) internal modules;\n\n  function setupModules(address to, bytes memory data) internal {\n    require(modules[SENTINEL_MODULES] == address(0), \"can only be called once\");\n    modules[SENTINEL_MODULES] = SENTINEL_MODULES;\n    \n    if(to != address(0)) {\n      require(execute(Types.Operation.DelegateCall, to, 0, data, gasleft()), \"transaction fails\");\n    }\n  }\n\n  function enableModule(address module) public authorized {\n    require(module != address(0) && module != address(this) && module != SENTINEL_MODULES, \"invalid module address\");\n    require(modules[module] != address(0), \"dup module address\");\n    modules[module] = SENTINEL_MODULES;\n    modules[SENTINEL_MODULES] = module;\n    emit EnabledModule(module);\n  }\n\n  function disableModule(address prevModule, address module) public authorized {\n    require(module != address(0) && module != address(this) && module != SENTINEL_MODULES, \"invalid module address\");\n    require(modules[prevModule] == module, \"not correspond to the module\");\n    modules[prevModule] = modules[module];\n    modules[module] = address(0);\n    emit DisabledModule(module);\n  }\n\n  function execTransactionFromModule(\n    Types.Operation operation, \n    address to, \n    uint256 value, \n    bytes memory data\n  ) public virtual returns(bool success) {\n    require(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0), \"not allowed module\");\n    success = execute(operation, to, value, data, gasleft());\n    if(success) emit ExecutionFromModuleSuccess(msg.sender);\n    else emit ExecutionFromModuleFailure(msg.sender);\n  }\n\n  function execTransactionFromModuleReturnData(\n    Types.Operation operation, \n    address to, \n    uint256 value, \n    bytes memory data\n  ) public virtual returns(bool success, bytes memory returnData) {\n    require(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0), \"not allowed module\");\n    success = execTransactionFromModule(operation, to, value, data);\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      let ptr := mload(0x40)\n      mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\n      mstore(ptr, returndatasize())\n      returndatacopy(add(ptr, 0x20), 0, returndatasize())\n      returnData := ptr\n    }\n  }\n\n  function isModuleEnabled(address module) public view returns(bool) {\n    return module != SENTINEL_MODULES && modules[module] != address(0);\n  }\n\n  function getModulePagenated(address start, uint256 pageSize) external view returns(address[] memory array, address next) {\n    array = new address[](pageSize);\n\n    uint256 moduleCount = 0;\n    address currentModule = modules[start];\n    while(currentModule != address(0) && currentModule != SENTINEL_MODULES && moduleCount < pageSize) {\n      array[moduleCount] = currentModule;\n      currentModule = modules[currentModule];\n      moduleCount++;\n    }\n    next = currentModule;\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      mstore(array, moduleCount)\n    }\n  }\n} "
    },
    "contracts/base/FallbackManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\nimport \"../utils/SelfAuthorized.sol\";\n\ncontract FallbackManager is SelfAuthorized {\n  event ChangedFallbackHandler(address handler);\n\n  // keccak256(\"fallback_manager.handler.address\")\n  bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\n\n  function _setupFallbackHandler(address handler) internal {\n    bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      sstore(slot, handler)\n    }\n  }\n\n  function setFallbackHandler(address handler) public authorized {\n    _setupFallbackHandler(handler);\n    emit ChangedFallbackHandler(handler);\n  }\n\n  // solhint-disable-next-line payable-fallback,no-complex-fallback\n  fallback() external {\n    bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      let handler := sload(slot)\n      if iszero(handler) {\n        return(0, 0)\n      }\n      calldatacopy(0, 0, calldatasize())\n      mstore(calldatasize(), shl(96, caller()))\n      let success := call(gas(), handler, 0, 0, add(calldatasize(), 20), 0, 0)\n      returndatacopy(0, 0, returndatasize())\n      if iszero(success) {\n        revert(0, returndatasize())\n      }\n      return(0, returndatasize())\n    }\n  }\n}"
    },
    "contracts/base/GuardManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\nimport \"../utils/Types.sol\";\nimport \"../utils/SelfAuthorized.sol\";\n\ninterface IGuard {\n  function checkTransaction(\n    Types.Operation operation,\n    address to,\n    uint256 value,\n    bytes memory data,\n    uint256 safeTxGas,\n    uint256 baseGas,\n    uint256 gasPrice,\n    address gasToken,\n    address payable refundReceiver,\n    bytes memory signatures,\n    address from\n  ) external;\n\n  function checkAfterExecution(bytes32 txHash, bool success) external;\n}\n\ncontract GuardManager is SelfAuthorized {\n  event ChangedGuard(address guard);\n  // keccak256(\"guard_manager.guard.address\")\n  bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\n\n  function setGuard(address guard) public authorized {\n    bytes32 slot = GUARD_STORAGE_SLOT;\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      sstore(slot, guard)\n    }\n    emit ChangedGuard(guard);\n  }\n\n  function getGuard() public view returns(address guard) {\n    bytes32 slot = GUARD_STORAGE_SLOT;\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      guard := sload(slot)\n    }\n  }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}